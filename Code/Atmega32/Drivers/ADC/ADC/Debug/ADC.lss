
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000456  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000456  000004ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800064  00800064  000004ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000520  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c1a  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000089f  00000000  00000000  00001236  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000690  00000000  00000000  00001ad5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  00002168  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045c  00000000  00000000  000022a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005f4  00000000  00000000  00002704  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002cf8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e5       	ldi	r30, 0x56	; 86
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 45 01 	call	0x28a	; 0x28a <main>
  8a:	0c 94 29 02 	jmp	0x452	; 0x452 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <adc_init>:
 *  Author: ahmed
 */ 

#include "adc.h"
void adc_init(void){
DDRA= 0x00;
  92:	1a ba       	out	0x1a, r1	; 26
ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); /* 128 pre-scale for 8Mhz */
  94:	86 b1       	in	r24, 0x06	; 6
  96:	87 60       	ori	r24, 0x07	; 7
  98:	86 b9       	out	0x06, r24	; 6
ADCSRA |= (1 << ADEN);   							  /* Enable the ADC */
  9a:	86 b1       	in	r24, 0x06	; 6
  9c:	80 68       	ori	r24, 0x80	; 128
  9e:	86 b9       	out	0x06, r24	; 6
  a0:	08 95       	ret

000000a2 <adc_read>:
}
uint16_t adc_read(uint8_t channel){
	uint8_t  ADC_LOW;
	uint8_t  ADC_high;
	uint16_t ADC_value;
	ADMUX  = channel;            /* define which ADC channel 				 */
  a2:	87 b9       	out	0x07, r24	; 7
	ADMUX |=  (1 << REFS0);         /* use AVcc as the reference 				 */
  a4:	87 b1       	in	r24, 0x07	; 7
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	87 b9       	out	0x07, r24	; 7
	ADMUX &= ~(1 << ADLAR);   		/* making ADCH has the MSbit 				 */
  aa:	87 b1       	in	r24, 0x07	; 7
  ac:	8f 7d       	andi	r24, 0xDF	; 223
  ae:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);		    /* Start Conversion							 */
  b0:	86 b1       	in	r24, 0x06	; 6
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	86 b9       	out	0x06, r24	; 6
	while(!(ADCSRA & (1<<ADIF)));   /* wait until conversion complete 			 */
  b6:	34 9b       	sbis	0x06, 4	; 6
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <adc_read+0x14>
	ADCSRA |= (1<<ADIF);			/* clear hardware "conversion complete" flag */
  ba:	86 b1       	in	r24, 0x06	; 6
  bc:	80 61       	ori	r24, 0x10	; 16
  be:	86 b9       	out	0x06, r24	; 6
	ADC_LOW = ADCL; 				/* read ADC data low REG before high REG     */
  c0:	24 b1       	in	r18, 0x04	; 4
	ADC_high= ADCH;
  c2:	85 b1       	in	r24, 0x05	; 5
	ADC_value = (ADC_high<<8)|(ADC_LOW & 0xFF);
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	98 2f       	mov	r25, r24
  c8:	88 27       	eor	r24, r24
	return(ADC_value);                             // Returns the ADC value of the chosen channel
  ca:	82 2b       	or	r24, r18
  cc:	08 95       	ret

000000ce <pinMode>:



void pinMode(uint8_t pin, uint8_t mode)
{
	if (mode == OUTPUT)
  ce:	61 30       	cpi	r22, 0x01	; 1
  d0:	a1 f5       	brne	.+104    	; 0x13a <pinMode+0x6c>
	{
		/* Set the data direction of the pin to output */
		switch (pin / 8)
  d2:	98 2f       	mov	r25, r24
  d4:	96 95       	lsr	r25
  d6:	96 95       	lsr	r25
  d8:	96 95       	lsr	r25
  da:	91 30       	cpi	r25, 0x01	; 1
  dc:	91 f0       	breq	.+36     	; 0x102 <pinMode+0x34>
  de:	18 f0       	brcs	.+6      	; 0xe6 <pinMode+0x18>
  e0:	92 30       	cpi	r25, 0x02	; 2
  e2:	e9 f0       	breq	.+58     	; 0x11e <pinMode+0x50>
  e4:	08 95       	ret
		{
			case 0: DDRB |= (1 << (pin % 8)); break;
  e6:	47 b3       	in	r20, 0x17	; 23
  e8:	87 70       	andi	r24, 0x07	; 7
  ea:	21 e0       	ldi	r18, 0x01	; 1
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	b9 01       	movw	r22, r18
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <pinMode+0x28>
  f2:	66 0f       	add	r22, r22
  f4:	77 1f       	adc	r23, r23
  f6:	8a 95       	dec	r24
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <pinMode+0x24>
  fa:	cb 01       	movw	r24, r22
  fc:	84 2b       	or	r24, r20
  fe:	87 bb       	out	0x17, r24	; 23
 100:	08 95       	ret
			case 1: DDRC |= (1 << (pin % 8)); break;
 102:	44 b3       	in	r20, 0x14	; 20
 104:	87 70       	andi	r24, 0x07	; 7
 106:	21 e0       	ldi	r18, 0x01	; 1
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	b9 01       	movw	r22, r18
 10c:	02 c0       	rjmp	.+4      	; 0x112 <pinMode+0x44>
 10e:	66 0f       	add	r22, r22
 110:	77 1f       	adc	r23, r23
 112:	8a 95       	dec	r24
 114:	e2 f7       	brpl	.-8      	; 0x10e <pinMode+0x40>
 116:	cb 01       	movw	r24, r22
 118:	84 2b       	or	r24, r20
 11a:	84 bb       	out	0x14, r24	; 20
 11c:	08 95       	ret
			case 2: DDRD |= (1 << (pin % 8)); break;
 11e:	41 b3       	in	r20, 0x11	; 17
 120:	87 70       	andi	r24, 0x07	; 7
 122:	21 e0       	ldi	r18, 0x01	; 1
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	b9 01       	movw	r22, r18
 128:	02 c0       	rjmp	.+4      	; 0x12e <pinMode+0x60>
 12a:	66 0f       	add	r22, r22
 12c:	77 1f       	adc	r23, r23
 12e:	8a 95       	dec	r24
 130:	e2 f7       	brpl	.-8      	; 0x12a <pinMode+0x5c>
 132:	cb 01       	movw	r24, r22
 134:	84 2b       	or	r24, r20
 136:	81 bb       	out	0x11, r24	; 17
 138:	08 95       	ret
		}
	}
	else if (mode == INPUT)
 13a:	61 11       	cpse	r22, r1
 13c:	36 c0       	rjmp	.+108    	; 0x1aa <pinMode+0xdc>
	{
		/* Set the data direction of the pin to input */
		switch (pin / 8)
 13e:	98 2f       	mov	r25, r24
 140:	96 95       	lsr	r25
 142:	96 95       	lsr	r25
 144:	96 95       	lsr	r25
 146:	91 30       	cpi	r25, 0x01	; 1
 148:	99 f0       	breq	.+38     	; 0x170 <pinMode+0xa2>
 14a:	18 f0       	brcs	.+6      	; 0x152 <pinMode+0x84>
 14c:	92 30       	cpi	r25, 0x02	; 2
 14e:	f9 f0       	breq	.+62     	; 0x18e <pinMode+0xc0>
 150:	08 95       	ret
		{
			case 0: DDRB &= ~(1 << (pin % 8)); break;
 152:	47 b3       	in	r20, 0x17	; 23
 154:	87 70       	andi	r24, 0x07	; 7
 156:	21 e0       	ldi	r18, 0x01	; 1
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	b9 01       	movw	r22, r18
 15c:	02 c0       	rjmp	.+4      	; 0x162 <pinMode+0x94>
 15e:	66 0f       	add	r22, r22
 160:	77 1f       	adc	r23, r23
 162:	8a 95       	dec	r24
 164:	e2 f7       	brpl	.-8      	; 0x15e <pinMode+0x90>
 166:	cb 01       	movw	r24, r22
 168:	80 95       	com	r24
 16a:	84 23       	and	r24, r20
 16c:	87 bb       	out	0x17, r24	; 23
 16e:	08 95       	ret
			case 1: DDRC &= ~(1 << (pin % 8)); break;
 170:	44 b3       	in	r20, 0x14	; 20
 172:	87 70       	andi	r24, 0x07	; 7
 174:	21 e0       	ldi	r18, 0x01	; 1
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	b9 01       	movw	r22, r18
 17a:	02 c0       	rjmp	.+4      	; 0x180 <pinMode+0xb2>
 17c:	66 0f       	add	r22, r22
 17e:	77 1f       	adc	r23, r23
 180:	8a 95       	dec	r24
 182:	e2 f7       	brpl	.-8      	; 0x17c <pinMode+0xae>
 184:	cb 01       	movw	r24, r22
 186:	80 95       	com	r24
 188:	84 23       	and	r24, r20
 18a:	84 bb       	out	0x14, r24	; 20
 18c:	08 95       	ret
			case 2: DDRD &= ~(1 << (pin % 8)); break;
 18e:	41 b3       	in	r20, 0x11	; 17
 190:	87 70       	andi	r24, 0x07	; 7
 192:	21 e0       	ldi	r18, 0x01	; 1
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	b9 01       	movw	r22, r18
 198:	02 c0       	rjmp	.+4      	; 0x19e <pinMode+0xd0>
 19a:	66 0f       	add	r22, r22
 19c:	77 1f       	adc	r23, r23
 19e:	8a 95       	dec	r24
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <pinMode+0xcc>
 1a2:	cb 01       	movw	r24, r22
 1a4:	80 95       	com	r24
 1a6:	84 23       	and	r24, r20
 1a8:	81 bb       	out	0x11, r24	; 17
 1aa:	08 95       	ret

000001ac <digitalWrite>:



void digitalWrite(uint8_t pin, uint8_t value)
{
	if (value == HIGH)
 1ac:	61 30       	cpi	r22, 0x01	; 1
 1ae:	a1 f5       	brne	.+104    	; 0x218 <digitalWrite+0x6c>
	{
		/* Set the pin to high */
		switch (pin / 8)
 1b0:	98 2f       	mov	r25, r24
 1b2:	96 95       	lsr	r25
 1b4:	96 95       	lsr	r25
 1b6:	96 95       	lsr	r25
 1b8:	91 30       	cpi	r25, 0x01	; 1
 1ba:	91 f0       	breq	.+36     	; 0x1e0 <digitalWrite+0x34>
 1bc:	18 f0       	brcs	.+6      	; 0x1c4 <digitalWrite+0x18>
 1be:	92 30       	cpi	r25, 0x02	; 2
 1c0:	e9 f0       	breq	.+58     	; 0x1fc <digitalWrite+0x50>
 1c2:	08 95       	ret
		{
			case 0: PORTB |= (1 << (pin % 8)); break;
 1c4:	48 b3       	in	r20, 0x18	; 24
 1c6:	87 70       	andi	r24, 0x07	; 7
 1c8:	21 e0       	ldi	r18, 0x01	; 1
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	b9 01       	movw	r22, r18
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <digitalWrite+0x28>
 1d0:	66 0f       	add	r22, r22
 1d2:	77 1f       	adc	r23, r23
 1d4:	8a 95       	dec	r24
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <digitalWrite+0x24>
 1d8:	cb 01       	movw	r24, r22
 1da:	84 2b       	or	r24, r20
 1dc:	88 bb       	out	0x18, r24	; 24
 1de:	08 95       	ret
			case 1: PORTC |= (1 << (pin % 8)); break;
 1e0:	45 b3       	in	r20, 0x15	; 21
 1e2:	87 70       	andi	r24, 0x07	; 7
 1e4:	21 e0       	ldi	r18, 0x01	; 1
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	b9 01       	movw	r22, r18
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <digitalWrite+0x44>
 1ec:	66 0f       	add	r22, r22
 1ee:	77 1f       	adc	r23, r23
 1f0:	8a 95       	dec	r24
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <digitalWrite+0x40>
 1f4:	cb 01       	movw	r24, r22
 1f6:	84 2b       	or	r24, r20
 1f8:	85 bb       	out	0x15, r24	; 21
 1fa:	08 95       	ret
			case 2: PORTD |= (1 << (pin % 8)); break;
 1fc:	42 b3       	in	r20, 0x12	; 18
 1fe:	87 70       	andi	r24, 0x07	; 7
 200:	21 e0       	ldi	r18, 0x01	; 1
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	b9 01       	movw	r22, r18
 206:	02 c0       	rjmp	.+4      	; 0x20c <digitalWrite+0x60>
 208:	66 0f       	add	r22, r22
 20a:	77 1f       	adc	r23, r23
 20c:	8a 95       	dec	r24
 20e:	e2 f7       	brpl	.-8      	; 0x208 <digitalWrite+0x5c>
 210:	cb 01       	movw	r24, r22
 212:	84 2b       	or	r24, r20
 214:	82 bb       	out	0x12, r24	; 18
 216:	08 95       	ret
		}
	}
	else if (value == LOW)
 218:	61 11       	cpse	r22, r1
 21a:	36 c0       	rjmp	.+108    	; 0x288 <digitalWrite+0xdc>
	{
		/* Set the pin to low */
		switch (pin / 8)
 21c:	98 2f       	mov	r25, r24
 21e:	96 95       	lsr	r25
 220:	96 95       	lsr	r25
 222:	96 95       	lsr	r25
 224:	91 30       	cpi	r25, 0x01	; 1
 226:	99 f0       	breq	.+38     	; 0x24e <digitalWrite+0xa2>
 228:	18 f0       	brcs	.+6      	; 0x230 <digitalWrite+0x84>
 22a:	92 30       	cpi	r25, 0x02	; 2
 22c:	f9 f0       	breq	.+62     	; 0x26c <digitalWrite+0xc0>
 22e:	08 95       	ret
		{
			case 0: PORTB &= ~(1 << (pin % 8)); break;
 230:	48 b3       	in	r20, 0x18	; 24
 232:	87 70       	andi	r24, 0x07	; 7
 234:	21 e0       	ldi	r18, 0x01	; 1
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	b9 01       	movw	r22, r18
 23a:	02 c0       	rjmp	.+4      	; 0x240 <digitalWrite+0x94>
 23c:	66 0f       	add	r22, r22
 23e:	77 1f       	adc	r23, r23
 240:	8a 95       	dec	r24
 242:	e2 f7       	brpl	.-8      	; 0x23c <digitalWrite+0x90>
 244:	cb 01       	movw	r24, r22
 246:	80 95       	com	r24
 248:	84 23       	and	r24, r20
 24a:	88 bb       	out	0x18, r24	; 24
 24c:	08 95       	ret
			case 1: PORTC &= ~(1 << (pin % 8)); break;
 24e:	45 b3       	in	r20, 0x15	; 21
 250:	87 70       	andi	r24, 0x07	; 7
 252:	21 e0       	ldi	r18, 0x01	; 1
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	b9 01       	movw	r22, r18
 258:	02 c0       	rjmp	.+4      	; 0x25e <digitalWrite+0xb2>
 25a:	66 0f       	add	r22, r22
 25c:	77 1f       	adc	r23, r23
 25e:	8a 95       	dec	r24
 260:	e2 f7       	brpl	.-8      	; 0x25a <digitalWrite+0xae>
 262:	cb 01       	movw	r24, r22
 264:	80 95       	com	r24
 266:	84 23       	and	r24, r20
 268:	85 bb       	out	0x15, r24	; 21
 26a:	08 95       	ret
			case 2: PORTD &= ~(1 << (pin % 8)); break;
 26c:	42 b3       	in	r20, 0x12	; 18
 26e:	87 70       	andi	r24, 0x07	; 7
 270:	21 e0       	ldi	r18, 0x01	; 1
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	b9 01       	movw	r22, r18
 276:	02 c0       	rjmp	.+4      	; 0x27c <digitalWrite+0xd0>
 278:	66 0f       	add	r22, r22
 27a:	77 1f       	adc	r23, r23
 27c:	8a 95       	dec	r24
 27e:	e2 f7       	brpl	.-8      	; 0x278 <digitalWrite+0xcc>
 280:	cb 01       	movw	r24, r22
 282:	80 95       	com	r24
 284:	84 23       	and	r24, r20
 286:	82 bb       	out	0x12, r24	; 18
 288:	08 95       	ret

0000028a <main>:
#include "uart.h"
#include "dio.h"
int x=0;
int main(void)
{
	pinMode(19,OUTPUT);
 28a:	61 e0       	ldi	r22, 0x01	; 1
 28c:	83 e1       	ldi	r24, 0x13	; 19
 28e:	0e 94 67 00 	call	0xce	; 0xce <pinMode>
	
    adc_init(1);
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 49 00 	call	0x92	; 0x92 <adc_init>
	uart_init(9600);
 29a:	60 e8       	ldi	r22, 0x80	; 128
 29c:	75 e2       	ldi	r23, 0x25	; 37
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 7f 01 	call	0x2fe	; 0x2fe <uart_init>
    while (1) 
    {
		x=adc_read(0);
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	0e 94 51 00 	call	0xa2	; 0xa2 <adc_read>
 2ac:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__data_end+0x1>
 2b0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
		digitalWrite(19,HIGH);
 2b4:	61 e0       	ldi	r22, 0x01	; 1
 2b6:	83 e1       	ldi	r24, 0x13	; 19
 2b8:	0e 94 d6 00 	call	0x1ac	; 0x1ac <digitalWrite>
		uart_write_num(x);
 2bc:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 2c0:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x1>
 2c4:	0e 94 b5 01 	call	0x36a	; 0x36a <uart_write_num>
		uart_write_string("\r\n");
 2c8:	80 e6       	ldi	r24, 0x60	; 96
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 a8 01 	call	0x350	; 0x350 <uart_write_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d0:	2f ef       	ldi	r18, 0xFF	; 255
 2d2:	84 e3       	ldi	r24, 0x34	; 52
 2d4:	9c e0       	ldi	r25, 0x0C	; 12
 2d6:	21 50       	subi	r18, 0x01	; 1
 2d8:	80 40       	sbci	r24, 0x00	; 0
 2da:	90 40       	sbci	r25, 0x00	; 0
 2dc:	e1 f7       	brne	.-8      	; 0x2d6 <main+0x4c>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <main+0x56>
 2e0:	00 00       	nop
		_delay_ms(500);
		digitalWrite(19,LOW);
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	83 e1       	ldi	r24, 0x13	; 19
 2e6:	0e 94 d6 00 	call	0x1ac	; 0x1ac <digitalWrite>
 2ea:	2f ef       	ldi	r18, 0xFF	; 255
 2ec:	84 e3       	ldi	r24, 0x34	; 52
 2ee:	9c e0       	ldi	r25, 0x0C	; 12
 2f0:	21 50       	subi	r18, 0x01	; 1
 2f2:	80 40       	sbci	r24, 0x00	; 0
 2f4:	90 40       	sbci	r25, 0x00	; 0
 2f6:	e1 f7       	brne	.-8      	; 0x2f0 <main+0x66>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <main+0x70>
 2fa:	00 00       	nop
 2fc:	d4 cf       	rjmp	.-88     	; 0x2a6 <main+0x1c>

000002fe <uart_init>:
#include "uart.h"

void uart_init(uint32_t baud_rate)
{
	// Calculate UBRR value
	uint16_t UBRR_value = (((F_CPU / (baud_rate * 16UL))) - 1);
 2fe:	dc 01       	movw	r26, r24
 300:	cb 01       	movw	r24, r22
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	aa 1f       	adc	r26, r26
 308:	bb 1f       	adc	r27, r27
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	aa 1f       	adc	r26, r26
 310:	bb 1f       	adc	r27, r27
 312:	9c 01       	movw	r18, r24
 314:	ad 01       	movw	r20, r26
 316:	22 0f       	add	r18, r18
 318:	33 1f       	adc	r19, r19
 31a:	44 1f       	adc	r20, r20
 31c:	55 1f       	adc	r21, r21
 31e:	22 0f       	add	r18, r18
 320:	33 1f       	adc	r19, r19
 322:	44 1f       	adc	r20, r20
 324:	55 1f       	adc	r21, r21
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	72 e1       	ldi	r23, 0x12	; 18
 32a:	8a e7       	ldi	r24, 0x7A	; 122
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <__udivmodsi4>
 332:	21 50       	subi	r18, 0x01	; 1
 334:	31 09       	sbc	r19, r1
	
	// Set baud rate
	UBRRH = (uint8_t)(UBRR_value >> 8);
 336:	30 bd       	out	0x20, r19	; 32
	UBRRL = (uint8_t)(UBRR_value);
 338:	29 b9       	out	0x09, r18	; 9
	
	// Enable transmitter and receiver
	UCSRB |= (1 << TXEN) | (1 << RXEN);
 33a:	8a b1       	in	r24, 0x0a	; 10
 33c:	88 61       	ori	r24, 0x18	; 24
 33e:	8a b9       	out	0x0a, r24	; 10
	
	// Set frame format: 8 data bits, 1 stop bit, no parity
	UCSRC |= (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
 340:	80 b5       	in	r24, 0x20	; 32
 342:	86 68       	ori	r24, 0x86	; 134
 344:	80 bd       	out	0x20, r24	; 32
 346:	08 95       	ret

00000348 <uart_write_char>:
}

void uart_write_char(char data)
{
	// Wait for the transmitter to be ready
	while (!(UCSRA & (1 << UDRE)));
 348:	5d 9b       	sbis	0x0b, 5	; 11
 34a:	fe cf       	rjmp	.-4      	; 0x348 <uart_write_char>
	
	// Send the data
	UDR = data;
 34c:	8c b9       	out	0x0c, r24	; 12
 34e:	08 95       	ret

00000350 <uart_write_string>:
}

void uart_write_string(char* data)
{
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	ec 01       	movw	r28, r24
	// Loop through each character in the string
	while (*data != '\0')
 356:	03 c0       	rjmp	.+6      	; 0x35e <uart_write_string+0xe>
	{
		// Send the current character
		uart_write_char(*data);
 358:	0e 94 a4 01 	call	0x348	; 0x348 <uart_write_char>
		
		// Move to the next character
		data++;
 35c:	21 96       	adiw	r28, 0x01	; 1
}

void uart_write_string(char* data)
{
	// Loop through each character in the string
	while (*data != '\0')
 35e:	88 81       	ld	r24, Y
 360:	81 11       	cpse	r24, r1
 362:	fa cf       	rjmp	.-12     	; 0x358 <uart_write_string+0x8>
		uart_write_char(*data);
		
		// Move to the next character
		data++;
	}
}
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	08 95       	ret

0000036a <uart_write_num>:


void uart_write_num(uint16_t number)
{
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	cd b7       	in	r28, 0x3d	; 61
 370:	de b7       	in	r29, 0x3e	; 62
 372:	2a 97       	sbiw	r28, 0x0a	; 10
 374:	0f b6       	in	r0, 0x3f	; 63
 376:	f8 94       	cli
 378:	de bf       	out	0x3e, r29	; 62
 37a:	0f be       	out	0x3f, r0	; 63
 37c:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 37e:	4a e0       	ldi	r20, 0x0A	; 10
 380:	be 01       	movw	r22, r28
 382:	6f 5f       	subi	r22, 0xFF	; 255
 384:	7f 4f       	sbci	r23, 0xFF	; 255
 386:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <__itoa_ncheck>
	char buffer[10];
	itoa(number,buffer,10);
	uart_write_string(buffer); // Send the string via UART
 38a:	ce 01       	movw	r24, r28
 38c:	01 96       	adiw	r24, 0x01	; 1
 38e:	0e 94 a8 01 	call	0x350	; 0x350 <uart_write_string>
}
 392:	2a 96       	adiw	r28, 0x0a	; 10
 394:	0f b6       	in	r0, 0x3f	; 63
 396:	f8 94       	cli
 398:	de bf       	out	0x3e, r29	; 62
 39a:	0f be       	out	0x3f, r0	; 63
 39c:	cd bf       	out	0x3d, r28	; 61
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	08 95       	ret

000003a4 <__udivmodsi4>:
 3a4:	a1 e2       	ldi	r26, 0x21	; 33
 3a6:	1a 2e       	mov	r1, r26
 3a8:	aa 1b       	sub	r26, r26
 3aa:	bb 1b       	sub	r27, r27
 3ac:	fd 01       	movw	r30, r26
 3ae:	0d c0       	rjmp	.+26     	; 0x3ca <__udivmodsi4_ep>

000003b0 <__udivmodsi4_loop>:
 3b0:	aa 1f       	adc	r26, r26
 3b2:	bb 1f       	adc	r27, r27
 3b4:	ee 1f       	adc	r30, r30
 3b6:	ff 1f       	adc	r31, r31
 3b8:	a2 17       	cp	r26, r18
 3ba:	b3 07       	cpc	r27, r19
 3bc:	e4 07       	cpc	r30, r20
 3be:	f5 07       	cpc	r31, r21
 3c0:	20 f0       	brcs	.+8      	; 0x3ca <__udivmodsi4_ep>
 3c2:	a2 1b       	sub	r26, r18
 3c4:	b3 0b       	sbc	r27, r19
 3c6:	e4 0b       	sbc	r30, r20
 3c8:	f5 0b       	sbc	r31, r21

000003ca <__udivmodsi4_ep>:
 3ca:	66 1f       	adc	r22, r22
 3cc:	77 1f       	adc	r23, r23
 3ce:	88 1f       	adc	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	1a 94       	dec	r1
 3d4:	69 f7       	brne	.-38     	; 0x3b0 <__udivmodsi4_loop>
 3d6:	60 95       	com	r22
 3d8:	70 95       	com	r23
 3da:	80 95       	com	r24
 3dc:	90 95       	com	r25
 3de:	9b 01       	movw	r18, r22
 3e0:	ac 01       	movw	r20, r24
 3e2:	bd 01       	movw	r22, r26
 3e4:	cf 01       	movw	r24, r30
 3e6:	08 95       	ret

000003e8 <__itoa_ncheck>:
 3e8:	bb 27       	eor	r27, r27
 3ea:	4a 30       	cpi	r20, 0x0A	; 10
 3ec:	31 f4       	brne	.+12     	; 0x3fa <__itoa_ncheck+0x12>
 3ee:	99 23       	and	r25, r25
 3f0:	22 f4       	brpl	.+8      	; 0x3fa <__itoa_ncheck+0x12>
 3f2:	bd e2       	ldi	r27, 0x2D	; 45
 3f4:	90 95       	com	r25
 3f6:	81 95       	neg	r24
 3f8:	9f 4f       	sbci	r25, 0xFF	; 255
 3fa:	0c 94 00 02 	jmp	0x400	; 0x400 <__utoa_common>

000003fe <__utoa_ncheck>:
 3fe:	bb 27       	eor	r27, r27

00000400 <__utoa_common>:
 400:	fb 01       	movw	r30, r22
 402:	55 27       	eor	r21, r21
 404:	aa 27       	eor	r26, r26
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	aa 1f       	adc	r26, r26
 40c:	a4 17       	cp	r26, r20
 40e:	10 f0       	brcs	.+4      	; 0x414 <__utoa_common+0x14>
 410:	a4 1b       	sub	r26, r20
 412:	83 95       	inc	r24
 414:	50 51       	subi	r21, 0x10	; 16
 416:	b9 f7       	brne	.-18     	; 0x406 <__utoa_common+0x6>
 418:	a0 5d       	subi	r26, 0xD0	; 208
 41a:	aa 33       	cpi	r26, 0x3A	; 58
 41c:	08 f0       	brcs	.+2      	; 0x420 <__utoa_common+0x20>
 41e:	a9 5d       	subi	r26, 0xD9	; 217
 420:	a1 93       	st	Z+, r26
 422:	00 97       	sbiw	r24, 0x00	; 0
 424:	79 f7       	brne	.-34     	; 0x404 <__utoa_common+0x4>
 426:	b1 11       	cpse	r27, r1
 428:	b1 93       	st	Z+, r27
 42a:	11 92       	st	Z+, r1
 42c:	cb 01       	movw	r24, r22
 42e:	0c 94 19 02 	jmp	0x432	; 0x432 <strrev>

00000432 <strrev>:
 432:	dc 01       	movw	r26, r24
 434:	fc 01       	movw	r30, r24
 436:	67 2f       	mov	r22, r23
 438:	71 91       	ld	r23, Z+
 43a:	77 23       	and	r23, r23
 43c:	e1 f7       	brne	.-8      	; 0x436 <strrev+0x4>
 43e:	32 97       	sbiw	r30, 0x02	; 2
 440:	04 c0       	rjmp	.+8      	; 0x44a <strrev+0x18>
 442:	7c 91       	ld	r23, X
 444:	6d 93       	st	X+, r22
 446:	70 83       	st	Z, r23
 448:	62 91       	ld	r22, -Z
 44a:	ae 17       	cp	r26, r30
 44c:	bf 07       	cpc	r27, r31
 44e:	c8 f3       	brcs	.-14     	; 0x442 <strrev+0x10>
 450:	08 95       	ret

00000452 <_exit>:
 452:	f8 94       	cli

00000454 <__stop_program>:
 454:	ff cf       	rjmp	.-2      	; 0x454 <__stop_program>
