
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000001ae  00000242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800066  00800066  00000248  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000087a  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000687  00000000  00000000  00000b96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000031d  00000000  00000000  0000121d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  0000153c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000397  00000000  00000000  00001610  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001dc  00000000  00000000  000019a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001b83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ea       	ldi	r30, 0xAE	; 174
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9d 00 	call	0x13a	; 0x13a <main>
  8a:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <uart_init>:
void uart_write_num(float number)
{
	char buffer[10];
	snprintf(buffer, 10, "%.2f", number); // Convert the number to a string with two decimal places
	uart_write_string(buffer); // Send the string via UART
}
  92:	dc 01       	movw	r26, r24
  94:	cb 01       	movw	r24, r22
  96:	88 0f       	add	r24, r24
  98:	99 1f       	adc	r25, r25
  9a:	aa 1f       	adc	r26, r26
  9c:	bb 1f       	adc	r27, r27
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	aa 1f       	adc	r26, r26
  a4:	bb 1f       	adc	r27, r27
  a6:	9c 01       	movw	r18, r24
  a8:	ad 01       	movw	r20, r26
  aa:	22 0f       	add	r18, r18
  ac:	33 1f       	adc	r19, r19
  ae:	44 1f       	adc	r20, r20
  b0:	55 1f       	adc	r21, r21
  b2:	22 0f       	add	r18, r18
  b4:	33 1f       	adc	r19, r19
  b6:	44 1f       	adc	r20, r20
  b8:	55 1f       	adc	r21, r21
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	72 e1       	ldi	r23, 0x12	; 18
  be:	8a e7       	ldi	r24, 0x7A	; 122
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 b3 00 	call	0x166	; 0x166 <__udivmodsi4>
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	31 09       	sbc	r19, r1
  ca:	30 bd       	out	0x20, r19	; 32
  cc:	29 b9       	out	0x09, r18	; 9
  ce:	8a b1       	in	r24, 0x0a	; 10
  d0:	88 61       	ori	r24, 0x18	; 24
  d2:	8a b9       	out	0x0a, r24	; 10
  d4:	80 b5       	in	r24, 0x20	; 32
  d6:	86 60       	ori	r24, 0x06	; 6
  d8:	80 bd       	out	0x20, r24	; 32
  da:	08 95       	ret

000000dc <uart_write_char>:
  dc:	5d 9b       	sbis	0x0b, 5	; 11
  de:	fe cf       	rjmp	.-4      	; 0xdc <uart_write_char>
  e0:	8c b9       	out	0x0c, r24	; 12
  e2:	08 95       	ret

000000e4 <uart_write_string>:
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	ec 01       	movw	r28, r24
  ea:	03 c0       	rjmp	.+6      	; 0xf2 <uart_write_string+0xe>
  ec:	0e 94 6e 00 	call	0xdc	; 0xdc <uart_write_char>
  f0:	21 96       	adiw	r28, 0x01	; 1
  f2:	88 81       	ld	r24, Y
  f4:	81 11       	cpse	r24, r1
  f6:	fa cf       	rjmp	.-12     	; 0xec <uart_write_string+0x8>
  f8:	df 91       	pop	r29
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <uart_read_char>:


char uart_read_char(void)
{
	// Wait for data to be received
	while (!(UCSRA & (1 << RXC)));
  fe:	5f 9b       	sbis	0x0b, 7	; 11
 100:	fe cf       	rjmp	.-4      	; 0xfe <uart_read_char>
	
	// Return the received data
	return UDR;
 102:	8c b1       	in	r24, 0x0c	; 12
 104:	08 95       	ret

00000106 <uart_read_string>:
	uart_write_string(buffer); // Send the string via UART
}


void uart_read_string(char* buffer, uint8_t buffer_size)
{
 106:	0f 93       	push	r16
 108:	1f 93       	push	r17
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	8c 01       	movw	r16, r24
 110:	d6 2f       	mov	r29, r22
	// Loop through each character in the buffer
	for (uint8_t i = 0; i < buffer_size; i++)
 112:	c0 e0       	ldi	r28, 0x00	; 0
 114:	0b c0       	rjmp	.+22     	; 0x12c <uart_read_string+0x26>
	{
		// Receive the current character
		buffer[i] = uart_read_char();
 116:	0e 94 7f 00 	call	0xfe	; 0xfe <uart_read_char>
 11a:	f8 01       	movw	r30, r16
 11c:	ec 0f       	add	r30, r28
 11e:	f1 1d       	adc	r31, r1
 120:	80 83       	st	Z, r24
		
		// Stop if a null terminator is received
		if (buffer[i] == '\r' || buffer[i] == '\0' )
 122:	8d 30       	cpi	r24, 0x0D	; 13
 124:	29 f0       	breq	.+10     	; 0x130 <uart_read_string+0x2a>
 126:	88 23       	and	r24, r24
 128:	19 f0       	breq	.+6      	; 0x130 <uart_read_string+0x2a>


void uart_read_string(char* buffer, uint8_t buffer_size)
{
	// Loop through each character in the buffer
	for (uint8_t i = 0; i < buffer_size; i++)
 12a:	cf 5f       	subi	r28, 0xFF	; 255
 12c:	cd 17       	cp	r28, r29
 12e:	98 f3       	brcs	.-26     	; 0x116 <uart_read_string+0x10>
		if (buffer[i] == '\r' || buffer[i] == '\0' )
		{
			break;
		}
	}
}
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	1f 91       	pop	r17
 136:	0f 91       	pop	r16
 138:	08 95       	ret

0000013a <main>:


 char x[10];
int main(void)
{
	uart_init(9600);
 13a:	60 e8       	ldi	r22, 0x80	; 128
 13c:	75 e2       	ldi	r23, 0x25	; 37
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 49 00 	call	0x92	; 0x92 <uart_init>
	uart_write_string("Hello");
 146:	80 e6       	ldi	r24, 0x60	; 96
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 72 00 	call	0xe4	; 0xe4 <uart_write_string>
	uart_read_string(x,10);
 14e:	6a e0       	ldi	r22, 0x0A	; 10
 150:	86 e6       	ldi	r24, 0x66	; 102
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 83 00 	call	0x106	; 0x106 <uart_read_string>
	uart_write_string(x);
 158:	86 e6       	ldi	r24, 0x66	; 102
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 72 00 	call	0xe4	; 0xe4 <uart_write_string>
}
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	08 95       	ret

00000166 <__udivmodsi4>:
 166:	a1 e2       	ldi	r26, 0x21	; 33
 168:	1a 2e       	mov	r1, r26
 16a:	aa 1b       	sub	r26, r26
 16c:	bb 1b       	sub	r27, r27
 16e:	fd 01       	movw	r30, r26
 170:	0d c0       	rjmp	.+26     	; 0x18c <__udivmodsi4_ep>

00000172 <__udivmodsi4_loop>:
 172:	aa 1f       	adc	r26, r26
 174:	bb 1f       	adc	r27, r27
 176:	ee 1f       	adc	r30, r30
 178:	ff 1f       	adc	r31, r31
 17a:	a2 17       	cp	r26, r18
 17c:	b3 07       	cpc	r27, r19
 17e:	e4 07       	cpc	r30, r20
 180:	f5 07       	cpc	r31, r21
 182:	20 f0       	brcs	.+8      	; 0x18c <__udivmodsi4_ep>
 184:	a2 1b       	sub	r26, r18
 186:	b3 0b       	sbc	r27, r19
 188:	e4 0b       	sbc	r30, r20
 18a:	f5 0b       	sbc	r31, r21

0000018c <__udivmodsi4_ep>:
 18c:	66 1f       	adc	r22, r22
 18e:	77 1f       	adc	r23, r23
 190:	88 1f       	adc	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	1a 94       	dec	r1
 196:	69 f7       	brne	.-38     	; 0x172 <__udivmodsi4_loop>
 198:	60 95       	com	r22
 19a:	70 95       	com	r23
 19c:	80 95       	com	r24
 19e:	90 95       	com	r25
 1a0:	9b 01       	movw	r18, r22
 1a2:	ac 01       	movw	r20, r24
 1a4:	bd 01       	movw	r22, r26
 1a6:	cf 01       	movw	r24, r30
 1a8:	08 95       	ret

000001aa <_exit>:
 1aa:	f8 94       	cli

000001ac <__stop_program>:
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <__stop_program>
