
Motorcycle_controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a98  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  00000a98  00000b0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000b4e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b80  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  00000bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010b2  00000000  00000000  00000cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a77  00000000  00000000  00001d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008ec  00000000  00000000  000027d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000284  00000000  00000000  000030c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005c1  00000000  00000000  00003348  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009f9  00000000  00000000  00003909  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00004302  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e9       	ldi	r30, 0x98	; 152
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3a       	cpi	r26, 0xA2	; 162
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <main>
  7a:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <map>:
 * Created: 3/28/2023 2:36:52 AM
 *  Author: ahmed
 */ 
#include "common.h"
int32_t map(int32_t value, int32_t fromLow, int32_t fromHigh, int32_t toLow, int32_t toHigh)
{
  82:	4f 92       	push	r4
  84:	5f 92       	push	r5
  86:	6f 92       	push	r6
  88:	7f 92       	push	r7
  8a:	8f 92       	push	r8
  8c:	9f 92       	push	r9
  8e:	af 92       	push	r10
  90:	bf 92       	push	r11
  92:	cf 92       	push	r12
  94:	df 92       	push	r13
  96:	ef 92       	push	r14
  98:	ff 92       	push	r15
  9a:	0f 93       	push	r16
  9c:	1f 93       	push	r17
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	00 d0       	rcall	.+0      	; 0xa4 <map+0x22>
  a4:	00 d0       	rcall	.+0      	; 0xa6 <map+0x24>
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
  aa:	29 83       	std	Y+1, r18	; 0x01
  ac:	3a 83       	std	Y+2, r19	; 0x02
  ae:	4b 83       	std	Y+3, r20	; 0x03
  b0:	5c 83       	std	Y+4, r21	; 0x04
	// Determine the range of the input value
	int32_t fromRange = fromHigh - fromLow;
  b2:	e2 1a       	sub	r14, r18
  b4:	f3 0a       	sbc	r15, r19
  b6:	04 0b       	sbc	r16, r20
  b8:	15 0b       	sbc	r17, r21
	
	// Determine the range of the output value
	int32_t toRange = toHigh - toLow;
  ba:	4f 88       	ldd	r4, Y+23	; 0x17
  bc:	58 8c       	ldd	r5, Y+24	; 0x18
  be:	69 8c       	ldd	r6, Y+25	; 0x19
  c0:	7a 8c       	ldd	r7, Y+26	; 0x1a
  c2:	a3 01       	movw	r20, r6
  c4:	92 01       	movw	r18, r4
  c6:	2a 19       	sub	r18, r10
  c8:	3b 09       	sbc	r19, r11
  ca:	4c 09       	sbc	r20, r12
  cc:	5d 09       	sbc	r21, r13
	
	// Scale the input value to the output range
	int32_t output = ((value - fromLow) * toRange) / fromRange + toLow;
  ce:	69 80       	ldd	r6, Y+1	; 0x01
  d0:	7a 80       	ldd	r7, Y+2	; 0x02
  d2:	8b 80       	ldd	r8, Y+3	; 0x03
  d4:	9c 80       	ldd	r9, Y+4	; 0x04
  d6:	66 19       	sub	r22, r6
  d8:	77 09       	sbc	r23, r7
  da:	88 09       	sbc	r24, r8
  dc:	99 09       	sbc	r25, r9
  de:	0e 94 82 04 	call	0x904	; 0x904 <__mulsi3>
  e2:	a8 01       	movw	r20, r16
  e4:	97 01       	movw	r18, r14
  e6:	0e 94 c8 04 	call	0x990	; 0x990 <__divmodsi4>
  ea:	c6 01       	movw	r24, r12
  ec:	b5 01       	movw	r22, r10
  ee:	62 0f       	add	r22, r18
  f0:	73 1f       	adc	r23, r19
  f2:	84 1f       	adc	r24, r20
  f4:	95 1f       	adc	r25, r21
	
	// Return the mapped value
	return output;
}
  f6:	0f 90       	pop	r0
  f8:	0f 90       	pop	r0
  fa:	0f 90       	pop	r0
  fc:	0f 90       	pop	r0
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	1f 91       	pop	r17
 104:	0f 91       	pop	r16
 106:	ff 90       	pop	r15
 108:	ef 90       	pop	r14
 10a:	df 90       	pop	r13
 10c:	cf 90       	pop	r12
 10e:	bf 90       	pop	r11
 110:	af 90       	pop	r10
 112:	9f 90       	pop	r9
 114:	8f 90       	pop	r8
 116:	7f 90       	pop	r7
 118:	6f 90       	pop	r6
 11a:	5f 90       	pop	r5
 11c:	4f 90       	pop	r4
 11e:	08 95       	ret

00000120 <reverse>:

void reverse(char* str, int len) {
	int i = 0, j = len - 1;
 120:	61 50       	subi	r22, 0x01	; 1
 122:	71 09       	sbc	r23, r1
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	30 e0       	ldi	r19, 0x00	; 0
	while (i < j) {
 128:	0e c0       	rjmp	.+28     	; 0x146 <reverse+0x26>
		char temp = str[i];
 12a:	dc 01       	movw	r26, r24
 12c:	a2 0f       	add	r26, r18
 12e:	b3 1f       	adc	r27, r19
 130:	4c 91       	ld	r20, X
		str[i] = str[j];
 132:	fc 01       	movw	r30, r24
 134:	e6 0f       	add	r30, r22
 136:	f7 1f       	adc	r31, r23
 138:	50 81       	ld	r21, Z
 13a:	5c 93       	st	X, r21
		str[j] = temp;
 13c:	40 83       	st	Z, r20
		i++;
 13e:	2f 5f       	subi	r18, 0xFF	; 255
 140:	3f 4f       	sbci	r19, 0xFF	; 255
		j--;
 142:	61 50       	subi	r22, 0x01	; 1
 144:	71 09       	sbc	r23, r1
	return output;
}

void reverse(char* str, int len) {
	int i = 0, j = len - 1;
	while (i < j) {
 146:	26 17       	cp	r18, r22
 148:	37 07       	cpc	r19, r23
 14a:	7c f3       	brlt	.-34     	; 0x12a <reverse+0xa>
		str[i] = str[j];
		str[j] = temp;
		i++;
		j--;
	}
}
 14c:	08 95       	ret

0000014e <intToStr>:

int intToStr(int num, char* str, int start) {
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	9b 01       	movw	r18, r22
 158:	8a 01       	movw	r16, r20
	int i = 0;
 15a:	c0 e0       	ldi	r28, 0x00	; 0
 15c:	d0 e0       	ldi	r29, 0x00	; 0
	do {
		str[start + i] = (num % 10) + '0';
 15e:	fe 01       	movw	r30, r28
 160:	e0 0f       	add	r30, r16
 162:	f1 1f       	adc	r31, r17
 164:	e2 0f       	add	r30, r18
 166:	f3 1f       	adc	r31, r19
 168:	6a e0       	ldi	r22, 0x0A	; 10
 16a:	70 e0       	ldi	r23, 0x00	; 0
 16c:	0e 94 92 04 	call	0x924	; 0x924 <__divmodhi4>
 170:	80 5d       	subi	r24, 0xD0	; 208
 172:	80 83       	st	Z, r24
		num /= 10;
 174:	86 2f       	mov	r24, r22
 176:	97 2f       	mov	r25, r23
		i++;
 178:	21 96       	adiw	r28, 0x01	; 1
	} while (num != 0);
 17a:	00 97       	sbiw	r24, 0x00	; 0
 17c:	81 f7       	brne	.-32     	; 0x15e <intToStr+0x10>
	reverse(str + start, i);
 17e:	be 01       	movw	r22, r28
 180:	c9 01       	movw	r24, r18
 182:	80 0f       	add	r24, r16
 184:	91 1f       	adc	r25, r17
 186:	0e 94 90 00 	call	0x120	; 0x120 <reverse>
	return i;
}
 18a:	ce 01       	movw	r24, r28
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	1f 91       	pop	r17
 192:	0f 91       	pop	r16
 194:	08 95       	ret

00000196 <floatToString>:

void floatToString(float num, char* str, int precision) {
 196:	4f 92       	push	r4
 198:	5f 92       	push	r5
 19a:	6f 92       	push	r6
 19c:	7f 92       	push	r7
 19e:	af 92       	push	r10
 1a0:	bf 92       	push	r11
 1a2:	cf 92       	push	r12
 1a4:	df 92       	push	r13
 1a6:	ef 92       	push	r14
 1a8:	ff 92       	push	r15
 1aa:	0f 93       	push	r16
 1ac:	1f 93       	push	r17
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	2b 01       	movw	r4, r22
 1b4:	3c 01       	movw	r6, r24
 1b6:	5a 01       	movw	r10, r20
 1b8:	89 01       	movw	r16, r18
	int ipart = (int)num;
 1ba:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__fixsfsi>
 1be:	6b 01       	movw	r12, r22
 1c0:	7c 01       	movw	r14, r24
	float fpart = num - (float)ipart;
 1c2:	07 2e       	mov	r0, r23
 1c4:	00 0c       	add	r0, r0
 1c6:	88 0b       	sbc	r24, r24
 1c8:	99 0b       	sbc	r25, r25
 1ca:	0e 94 89 03 	call	0x712	; 0x712 <__floatsisf>
 1ce:	9b 01       	movw	r18, r22
 1d0:	ac 01       	movw	r20, r24
 1d2:	c3 01       	movw	r24, r6
 1d4:	b2 01       	movw	r22, r4
 1d6:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__subsf3>
 1da:	2b 01       	movw	r4, r22
 1dc:	3c 01       	movw	r6, r24

	int i = intToStr(ipart, str, 0);
 1de:	40 e0       	ldi	r20, 0x00	; 0
 1e0:	50 e0       	ldi	r21, 0x00	; 0
 1e2:	b5 01       	movw	r22, r10
 1e4:	c6 01       	movw	r24, r12
 1e6:	0e 94 a7 00 	call	0x14e	; 0x14e <intToStr>
 1ea:	ec 01       	movw	r28, r24

	if (precision != 0) {
 1ec:	01 15       	cp	r16, r1
 1ee:	11 05       	cpc	r17, r1
 1f0:	a1 f1       	breq	.+104    	; 0x25a <floatToString+0xc4>
		str[i] = '.';
 1f2:	8e e2       	ldi	r24, 0x2E	; 46
 1f4:	f5 01       	movw	r30, r10
 1f6:	ec 0f       	add	r30, r28
 1f8:	fd 1f       	adc	r31, r29
 1fa:	80 83       	st	Z, r24
		fpart = fpart * 10;
 1fc:	20 e0       	ldi	r18, 0x00	; 0
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	40 e2       	ldi	r20, 0x20	; 32
 202:	51 e4       	ldi	r21, 0x41	; 65
 204:	c3 01       	movw	r24, r6
 206:	b2 01       	movw	r22, r4
 208:	0e 94 15 04 	call	0x82a	; 0x82a <__mulsf3>
 20c:	6b 01       	movw	r12, r22
 20e:	7c 01       	movw	r14, r24
		while (precision > 0) {
 210:	21 c0       	rjmp	.+66     	; 0x254 <floatToString+0xbe>
			int digit = (int)fpart;
 212:	c7 01       	movw	r24, r14
 214:	b6 01       	movw	r22, r12
 216:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__fixsfsi>
			str[i + 1] = digit + '0';
 21a:	21 96       	adiw	r28, 0x01	; 1
 21c:	f5 01       	movw	r30, r10
 21e:	ec 0f       	add	r30, r28
 220:	fd 1f       	adc	r31, r29
 222:	20 e3       	ldi	r18, 0x30	; 48
 224:	26 0f       	add	r18, r22
 226:	20 83       	st	Z, r18
			fpart = fpart - (float)digit;
 228:	07 2e       	mov	r0, r23
 22a:	00 0c       	add	r0, r0
 22c:	88 0b       	sbc	r24, r24
 22e:	99 0b       	sbc	r25, r25
 230:	0e 94 89 03 	call	0x712	; 0x712 <__floatsisf>
 234:	9b 01       	movw	r18, r22
 236:	ac 01       	movw	r20, r24
 238:	c7 01       	movw	r24, r14
 23a:	b6 01       	movw	r22, r12
 23c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__subsf3>
			fpart = fpart * 10;
 240:	20 e0       	ldi	r18, 0x00	; 0
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	40 e2       	ldi	r20, 0x20	; 32
 246:	51 e4       	ldi	r21, 0x41	; 65
 248:	0e 94 15 04 	call	0x82a	; 0x82a <__mulsf3>
 24c:	6b 01       	movw	r12, r22
 24e:	7c 01       	movw	r14, r24
			i++;
			precision--;
 250:	01 50       	subi	r16, 0x01	; 1
 252:	11 09       	sbc	r17, r1
	int i = intToStr(ipart, str, 0);

	if (precision != 0) {
		str[i] = '.';
		fpart = fpart * 10;
		while (precision > 0) {
 254:	10 16       	cp	r1, r16
 256:	11 06       	cpc	r1, r17
 258:	e4 f2       	brlt	.-72     	; 0x212 <floatToString+0x7c>
			fpart = fpart * 10;
			i++;
			precision--;
		}
	}
	str[i + 1] = '\0';
 25a:	21 96       	adiw	r28, 0x01	; 1
 25c:	ca 0d       	add	r28, r10
 25e:	db 1d       	adc	r29, r11
 260:	18 82       	st	Y, r1
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	1f 91       	pop	r17
 268:	0f 91       	pop	r16
 26a:	ff 90       	pop	r15
 26c:	ef 90       	pop	r14
 26e:	df 90       	pop	r13
 270:	cf 90       	pop	r12
 272:	bf 90       	pop	r11
 274:	af 90       	pop	r10
 276:	7f 90       	pop	r7
 278:	6f 90       	pop	r6
 27a:	5f 90       	pop	r5
 27c:	4f 90       	pop	r4
 27e:	08 95       	ret

00000280 <adc_init>:
 *  Author: ahmed
 */ 

#include "adc.h"
void adc_init(v_ref_selc v_ref){
switch(v_ref)
 280:	88 23       	and	r24, r24
 282:	19 f0       	breq	.+6      	; 0x28a <adc_init+0xa>
 284:	81 30       	cpi	r24, 0x01	; 1
 286:	41 f0       	breq	.+16     	; 0x298 <adc_init+0x18>
 288:	0d c0       	rjmp	.+26     	; 0x2a4 <adc_init+0x24>
{
	case INTERNAL_REF:
	ADMUX |=  (1 << REFS0);         /* use internal 2.56 				 */
 28a:	87 b1       	in	r24, 0x07	; 7
 28c:	80 64       	ori	r24, 0x40	; 64
 28e:	87 b9       	out	0x07, r24	; 7
	ADMUX |=  (1 << REFS1);         /* use internal 2.56 				 */
 290:	87 b1       	in	r24, 0x07	; 7
 292:	80 68       	ori	r24, 0x80	; 128
 294:	87 b9       	out	0x07, r24	; 7
	break;
 296:	06 c0       	rjmp	.+12     	; 0x2a4 <adc_init+0x24>
	case EXTERNAL_VCC:
	ADMUX |=  (1 << REFS0);         /* use AVcc as the reference 				 */
 298:	87 b1       	in	r24, 0x07	; 7
 29a:	80 64       	ori	r24, 0x40	; 64
 29c:	87 b9       	out	0x07, r24	; 7
	ADMUX &= ~(1 << REFS1);         /* use AVcc as the reference 				 */
 29e:	87 b1       	in	r24, 0x07	; 7
 2a0:	8f 77       	andi	r24, 0x7F	; 127
 2a2:	87 b9       	out	0x07, r24	; 7
	break;
}
   ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 2a4:	86 b1       	in	r24, 0x06	; 6
 2a6:	87 68       	ori	r24, 0x87	; 135
 2a8:	86 b9       	out	0x06, r24	; 6
 2aa:	08 95       	ret

000002ac <adc_read>:
}
uint16_t adc_read(u8 channel){
	 // Set ADC channel
	 ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);
 2ac:	97 b1       	in	r25, 0x07	; 7
 2ae:	90 7f       	andi	r25, 0xF0	; 240
 2b0:	8f 70       	andi	r24, 0x0F	; 15
 2b2:	89 2b       	or	r24, r25
 2b4:	87 b9       	out	0x07, r24	; 7
	 
	 // Start ADC conversion
	 ADCSRA |= (1 << ADSC);
 2b6:	86 b1       	in	r24, 0x06	; 6
 2b8:	80 64       	ori	r24, 0x40	; 64
 2ba:	86 b9       	out	0x06, r24	; 6
	 
	 // Wait for conversion to complete
	 while (ADCSRA & (1 << ADSC));
 2bc:	36 99       	sbic	0x06, 6	; 6
 2be:	fe cf       	rjmp	.-4      	; 0x2bc <adc_read+0x10>
	 
	 // Return ADC value
	 return ADC;
 2c0:	84 b1       	in	r24, 0x04	; 4
 2c2:	95 b1       	in	r25, 0x05	; 5
 2c4:	08 95       	ret

000002c6 <uart_init>:

char uart_read_byte()
{
	while (! ((UCSRA) & (1 << 7)));
	return UDR;
}
 2c6:	cf 92       	push	r12
 2c8:	df 92       	push	r13
 2ca:	ef 92       	push	r14
 2cc:	ff 92       	push	r15
 2ce:	6b 01       	movw	r12, r22
 2d0:	7c 01       	movw	r14, r24
 2d2:	88 e1       	ldi	r24, 0x18	; 24
 2d4:	8a b9       	out	0x0a, r24	; 10
 2d6:	80 b5       	in	r24, 0x20	; 32
 2d8:	86 60       	ori	r24, 0x06	; 6
 2da:	80 bd       	out	0x20, r24	; 32
 2dc:	8b b1       	in	r24, 0x0b	; 11
 2de:	82 60       	ori	r24, 0x02	; 2
 2e0:	8b b9       	out	0x0b, r24	; 11
 2e2:	80 b5       	in	r24, 0x20	; 32
 2e4:	80 68       	ori	r24, 0x80	; 128
 2e6:	80 bd       	out	0x20, r24	; 32
 2e8:	80 b5       	in	r24, 0x20	; 32
 2ea:	90 e1       	ldi	r25, 0x10	; 16
 2ec:	49 9f       	mul	r20, r25
 2ee:	a0 01       	movw	r20, r0
 2f0:	11 24       	eor	r1, r1
 2f2:	48 2b       	or	r20, r24
 2f4:	40 bd       	out	0x20, r20	; 32
 2f6:	30 b5       	in	r19, 0x20	; 32
 2f8:	82 2f       	mov	r24, r18
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	83 2b       	or	r24, r19
 30a:	80 bd       	out	0x20, r24	; 32
 30c:	80 b5       	in	r24, 0x20	; 32
 30e:	80 68       	ori	r24, 0x80	; 128
 310:	80 bd       	out	0x20, r24	; 32
 312:	80 b5       	in	r24, 0x20	; 32
 314:	8f 7b       	andi	r24, 0xBF	; 191
 316:	80 bd       	out	0x20, r24	; 32
 318:	89 b1       	in	r24, 0x09	; 9
 31a:	8f 77       	andi	r24, 0x7F	; 127
 31c:	89 b9       	out	0x09, r24	; 9
 31e:	d7 01       	movw	r26, r14
 320:	c6 01       	movw	r24, r12
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	aa 1f       	adc	r26, r26
 328:	bb 1f       	adc	r27, r27
 32a:	88 0f       	add	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	aa 1f       	adc	r26, r26
 330:	bb 1f       	adc	r27, r27
 332:	9c 01       	movw	r18, r24
 334:	ad 01       	movw	r20, r26
 336:	22 0f       	add	r18, r18
 338:	33 1f       	adc	r19, r19
 33a:	44 1f       	adc	r20, r20
 33c:	55 1f       	adc	r21, r21
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	72 e1       	ldi	r23, 0x12	; 18
 342:	8a e7       	ldi	r24, 0x7A	; 122
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 a6 04 	call	0x94c	; 0x94c <__udivmodsi4>
 34a:	29 b9       	out	0x09, r18	; 9
 34c:	bb 27       	eor	r27, r27
 34e:	a5 2f       	mov	r26, r21
 350:	94 2f       	mov	r25, r20
 352:	83 2f       	mov	r24, r19
 354:	80 bd       	out	0x20, r24	; 32
 356:	ff 90       	pop	r15
 358:	ef 90       	pop	r14
 35a:	df 90       	pop	r13
 35c:	cf 90       	pop	r12
 35e:	08 95       	ret

00000360 <uart_write_byte>:
 360:	5d 9b       	sbis	0x0b, 5	; 11
 362:	fe cf       	rjmp	.-4      	; 0x360 <uart_write_byte>
 364:	8c b9       	out	0x0c, r24	; 12
 366:	08 95       	ret

00000368 <uart_write_text>:
void uart_write_text(char * write_text)
{
 368:	cf 93       	push	r28
 36a:	df 93       	push	r29
 36c:	ec 01       	movw	r28, r24
	 while(*write_text>0)
 36e:	03 c0       	rjmp	.+6      	; 0x376 <uart_write_text+0xe>
	 {
		 uart_write_byte(*write_text++);
 370:	21 96       	adiw	r28, 0x01	; 1
 372:	0e 94 b0 01 	call	0x360	; 0x360 <uart_write_byte>
	while (! ((UCSRA) & (1 << 7)));
	return UDR;
}
void uart_write_text(char * write_text)
{
	 while(*write_text>0)
 376:	88 81       	ld	r24, Y
 378:	81 11       	cpse	r24, r1
 37a:	fa cf       	rjmp	.-12     	; 0x370 <uart_write_text+0x8>
	 {
		 uart_write_byte(*write_text++);
	 }
 37c:	df 91       	pop	r29
 37e:	cf 91       	pop	r28
 380:	08 95       	ret

00000382 <uart_write_float>:
	while(!(UCSRA & (1<<5)));// handle it with interrupt to prevent delay
	UDR = write_byte;
}

void uart_write_float(f32 num)
{
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	00 d0       	rcall	.+0      	; 0x388 <uart_write_float+0x6>
 388:	00 d0       	rcall	.+0      	; 0x38a <uart_write_float+0x8>
 38a:	00 d0       	rcall	.+0      	; 0x38c <uart_write_float+0xa>
 38c:	cd b7       	in	r28, 0x3d	; 61
 38e:	de b7       	in	r29, 0x3e	; 62
	char txt[6];
floatToString(num,txt,1);	 
 390:	21 e0       	ldi	r18, 0x01	; 1
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	ae 01       	movw	r20, r28
 396:	4f 5f       	subi	r20, 0xFF	; 255
 398:	5f 4f       	sbci	r21, 0xFF	; 255
 39a:	0e 94 cb 00 	call	0x196	; 0x196 <floatToString>
	uart_write_text(txt);		
 39e:	ce 01       	movw	r24, r28
 3a0:	01 96       	adiw	r24, 0x01	; 1
 3a2:	0e 94 b4 01 	call	0x368	; 0x368 <uart_write_text>
}
 3a6:	26 96       	adiw	r28, 0x06	; 6
 3a8:	0f b6       	in	r0, 0x3f	; 63
 3aa:	f8 94       	cli
 3ac:	de bf       	out	0x3e, r29	; 62
 3ae:	0f be       	out	0x3f, r0	; 63
 3b0:	cd bf       	out	0x3d, r28	; 61
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	08 95       	ret

000003b8 <uart_write_num>:
void uart_write_num(u16 num)
{
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
 3bc:	cd b7       	in	r28, 0x3d	; 61
 3be:	de b7       	in	r29, 0x3e	; 62
 3c0:	2a 97       	sbiw	r28, 0x0a	; 10
 3c2:	0f b6       	in	r0, 0x3f	; 63
 3c4:	f8 94       	cli
 3c6:	de bf       	out	0x3e, r29	; 62
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3cc:	4a e0       	ldi	r20, 0x0A	; 10
 3ce:	be 01       	movw	r22, r28
 3d0:	6f 5f       	subi	r22, 0xFF	; 255
 3d2:	7f 4f       	sbci	r23, 0xFF	; 255
 3d4:	0e 94 15 05 	call	0xa2a	; 0xa2a <__itoa_ncheck>
	char txt[10];
	itoa(num,txt,10);
	uart_write_text(txt);
 3d8:	ce 01       	movw	r24, r28
 3da:	01 96       	adiw	r24, 0x01	; 1
 3dc:	0e 94 b4 01 	call	0x368	; 0x368 <uart_write_text>
}
 3e0:	2a 96       	adiw	r28, 0x0a	; 10
 3e2:	0f b6       	in	r0, 0x3f	; 63
 3e4:	f8 94       	cli
 3e6:	de bf       	out	0x3e, r29	; 62
 3e8:	0f be       	out	0x3f, r0	; 63
 3ea:	cd bf       	out	0x3d, r28	; 61
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	08 95       	ret

000003f2 <main>:

#include "MotorCycle_Sensors/Fuel_Level_sensor/fuel_level_sensor.h"

int main(void)
{
  tank_level_init();
 3f2:	0e 94 08 02 	call	0x410	; 0x410 <tank_level_init>
   while (1) 
    {
		tank_level_read(FUEL_TANK_PIN);
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	0e 94 18 02 	call	0x430	; 0x430 <tank_level_read>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3fc:	2f ef       	ldi	r18, 0xFF	; 255
 3fe:	89 e6       	ldi	r24, 0x69	; 105
 400:	98 e1       	ldi	r25, 0x18	; 24
 402:	21 50       	subi	r18, 0x01	; 1
 404:	80 40       	sbci	r24, 0x00	; 0
 406:	90 40       	sbci	r25, 0x00	; 0
 408:	e1 f7       	brne	.-8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 40c:	00 00       	nop
 40e:	f3 cf       	rjmp	.-26     	; 0x3f6 <main+0x4>

00000410 <tank_level_init>:
 */ 
#include "fuel_level_sensor.h"
void tank_level_init()
{
	#ifdef _DEBUG
	uart_init(9600,NONE,ONE_BIT);
 410:	20 e0       	ldi	r18, 0x00	; 0
 412:	40 e0       	ldi	r20, 0x00	; 0
 414:	60 e8       	ldi	r22, 0x80	; 128
 416:	75 e2       	ldi	r23, 0x25	; 37
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	0e 94 63 01 	call	0x2c6	; 0x2c6 <uart_init>
	uart_write_text("UART BEGIN\r\n");
 420:	80 e6       	ldi	r24, 0x60	; 96
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	0e 94 b4 01 	call	0x368	; 0x368 <uart_write_text>
#endif // _DEBUG

	 adc_init(INTERNAL_REF);
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	0e 94 40 01 	call	0x280	; 0x280 <adc_init>
 42e:	08 95       	ret

00000430 <tank_level_read>:
}

f32 tank_level_read(u8 tank_level_pin)
{
 430:	af 92       	push	r10
 432:	bf 92       	push	r11
 434:	cf 92       	push	r12
 436:	df 92       	push	r13
 438:	ef 92       	push	r14
 43a:	ff 92       	push	r15
 43c:	0f 93       	push	r16
 43e:	1f 93       	push	r17
 440:	cf 93       	push	r28
 442:	c8 2f       	mov	r28, r24
		  f32 tank_level; // tank level reading will be stored
		  tank_level = map(adc_read(tank_level_pin),ADC_VALUE_MIN,ADC_VALUE_MAX,Fuel_Tank_MAX_SIZE,0);
 444:	0e 94 56 01 	call	0x2ac	; 0x2ac <adc_read>
 448:	bc 01       	movw	r22, r24
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	1f 92       	push	r1
 450:	1f 92       	push	r1
 452:	1f 92       	push	r1
 454:	1f 92       	push	r1
 456:	0f 2e       	mov	r0, r31
 458:	f4 e6       	ldi	r31, 0x64	; 100
 45a:	af 2e       	mov	r10, r31
 45c:	f9 e1       	ldi	r31, 0x19	; 25
 45e:	bf 2e       	mov	r11, r31
 460:	c1 2c       	mov	r12, r1
 462:	d1 2c       	mov	r13, r1
 464:	f0 2d       	mov	r31, r0
 466:	ee 24       	eor	r14, r14
 468:	ea 94       	dec	r14
 46a:	13 e0       	ldi	r17, 0x03	; 3
 46c:	f1 2e       	mov	r15, r17
 46e:	00 e0       	ldi	r16, 0x00	; 0
 470:	10 e0       	ldi	r17, 0x00	; 0
 472:	22 e3       	ldi	r18, 0x32	; 50
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	40 e0       	ldi	r20, 0x00	; 0
 478:	50 e0       	ldi	r21, 0x00	; 0
 47a:	0e 94 41 00 	call	0x82	; 0x82 <map>
 47e:	0e 94 89 03 	call	0x712	; 0x712 <__floatsisf>
		  tank_level = tank_level/1000;
 482:	20 e0       	ldi	r18, 0x00	; 0
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	4a e7       	ldi	r20, 0x7A	; 122
 488:	54 e4       	ldi	r21, 0x44	; 68
 48a:	0e 94 df 02 	call	0x5be	; 0x5be <__divsf3>
 48e:	6b 01       	movw	r12, r22
 490:	7c 01       	movw	r14, r24
		  
		  #ifdef _DEBUG
		   uart_write_text("Fuel Level: ");
 492:	8d e6       	ldi	r24, 0x6D	; 109
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	0e 94 b4 01 	call	0x368	; 0x368 <uart_write_text>
		   uart_write_float(tank_level);
 49a:	c7 01       	movw	r24, r14
 49c:	b6 01       	movw	r22, r12
 49e:	0e 94 c1 01 	call	0x382	; 0x382 <uart_write_float>
		   uart_write_text(" L\r\n");
 4a2:	8a e7       	ldi	r24, 0x7A	; 122
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	0e 94 b4 01 	call	0x368	; 0x368 <uart_write_text>
		   uart_write_text("ADC value for fuel level sensor: ");
 4aa:	8f e7       	ldi	r24, 0x7F	; 127
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	0e 94 b4 01 	call	0x368	; 0x368 <uart_write_text>
		   uart_write_num(adc_read(tank_level_pin));
 4b2:	8c 2f       	mov	r24, r28
 4b4:	0e 94 56 01 	call	0x2ac	; 0x2ac <adc_read>
 4b8:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <uart_write_num>
		   uart_write_text("\r\n");
 4bc:	8c e7       	ldi	r24, 0x7C	; 124
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	0e 94 b4 01 	call	0x368	; 0x368 <uart_write_text>
#endif // _DEBUG

return tank_level;
 4c4:	0f 90       	pop	r0
 4c6:	0f 90       	pop	r0
 4c8:	0f 90       	pop	r0
 4ca:	0f 90       	pop	r0
 4cc:	c7 01       	movw	r24, r14
 4ce:	b6 01       	movw	r22, r12
 4d0:	cf 91       	pop	r28
 4d2:	1f 91       	pop	r17
 4d4:	0f 91       	pop	r16
 4d6:	ff 90       	pop	r15
 4d8:	ef 90       	pop	r14
 4da:	df 90       	pop	r13
 4dc:	cf 90       	pop	r12
 4de:	bf 90       	pop	r11
 4e0:	af 90       	pop	r10
 4e2:	08 95       	ret

000004e4 <__subsf3>:
 4e4:	50 58       	subi	r21, 0x80	; 128

000004e6 <__addsf3>:
 4e6:	bb 27       	eor	r27, r27
 4e8:	aa 27       	eor	r26, r26
 4ea:	0e 94 8a 02 	call	0x514	; 0x514 <__addsf3x>
 4ee:	0c 94 db 03 	jmp	0x7b6	; 0x7b6 <__fp_round>
 4f2:	0e 94 cd 03 	call	0x79a	; 0x79a <__fp_pscA>
 4f6:	38 f0       	brcs	.+14     	; 0x506 <__addsf3+0x20>
 4f8:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__fp_pscB>
 4fc:	20 f0       	brcs	.+8      	; 0x506 <__addsf3+0x20>
 4fe:	39 f4       	brne	.+14     	; 0x50e <__addsf3+0x28>
 500:	9f 3f       	cpi	r25, 0xFF	; 255
 502:	19 f4       	brne	.+6      	; 0x50a <__addsf3+0x24>
 504:	26 f4       	brtc	.+8      	; 0x50e <__addsf3+0x28>
 506:	0c 94 ca 03 	jmp	0x794	; 0x794 <__fp_nan>
 50a:	0e f4       	brtc	.+2      	; 0x50e <__addsf3+0x28>
 50c:	e0 95       	com	r30
 50e:	e7 fb       	bst	r30, 7
 510:	0c 94 c4 03 	jmp	0x788	; 0x788 <__fp_inf>

00000514 <__addsf3x>:
 514:	e9 2f       	mov	r30, r25
 516:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <__fp_split3>
 51a:	58 f3       	brcs	.-42     	; 0x4f2 <__addsf3+0xc>
 51c:	ba 17       	cp	r27, r26
 51e:	62 07       	cpc	r22, r18
 520:	73 07       	cpc	r23, r19
 522:	84 07       	cpc	r24, r20
 524:	95 07       	cpc	r25, r21
 526:	20 f0       	brcs	.+8      	; 0x530 <__addsf3x+0x1c>
 528:	79 f4       	brne	.+30     	; 0x548 <__addsf3x+0x34>
 52a:	a6 f5       	brtc	.+104    	; 0x594 <__addsf3x+0x80>
 52c:	0c 94 0e 04 	jmp	0x81c	; 0x81c <__fp_zero>
 530:	0e f4       	brtc	.+2      	; 0x534 <__addsf3x+0x20>
 532:	e0 95       	com	r30
 534:	0b 2e       	mov	r0, r27
 536:	ba 2f       	mov	r27, r26
 538:	a0 2d       	mov	r26, r0
 53a:	0b 01       	movw	r0, r22
 53c:	b9 01       	movw	r22, r18
 53e:	90 01       	movw	r18, r0
 540:	0c 01       	movw	r0, r24
 542:	ca 01       	movw	r24, r20
 544:	a0 01       	movw	r20, r0
 546:	11 24       	eor	r1, r1
 548:	ff 27       	eor	r31, r31
 54a:	59 1b       	sub	r21, r25
 54c:	99 f0       	breq	.+38     	; 0x574 <__addsf3x+0x60>
 54e:	59 3f       	cpi	r21, 0xF9	; 249
 550:	50 f4       	brcc	.+20     	; 0x566 <__addsf3x+0x52>
 552:	50 3e       	cpi	r21, 0xE0	; 224
 554:	68 f1       	brcs	.+90     	; 0x5b0 <__addsf3x+0x9c>
 556:	1a 16       	cp	r1, r26
 558:	f0 40       	sbci	r31, 0x00	; 0
 55a:	a2 2f       	mov	r26, r18
 55c:	23 2f       	mov	r18, r19
 55e:	34 2f       	mov	r19, r20
 560:	44 27       	eor	r20, r20
 562:	58 5f       	subi	r21, 0xF8	; 248
 564:	f3 cf       	rjmp	.-26     	; 0x54c <__addsf3x+0x38>
 566:	46 95       	lsr	r20
 568:	37 95       	ror	r19
 56a:	27 95       	ror	r18
 56c:	a7 95       	ror	r26
 56e:	f0 40       	sbci	r31, 0x00	; 0
 570:	53 95       	inc	r21
 572:	c9 f7       	brne	.-14     	; 0x566 <__addsf3x+0x52>
 574:	7e f4       	brtc	.+30     	; 0x594 <__addsf3x+0x80>
 576:	1f 16       	cp	r1, r31
 578:	ba 0b       	sbc	r27, r26
 57a:	62 0b       	sbc	r22, r18
 57c:	73 0b       	sbc	r23, r19
 57e:	84 0b       	sbc	r24, r20
 580:	ba f0       	brmi	.+46     	; 0x5b0 <__addsf3x+0x9c>
 582:	91 50       	subi	r25, 0x01	; 1
 584:	a1 f0       	breq	.+40     	; 0x5ae <__addsf3x+0x9a>
 586:	ff 0f       	add	r31, r31
 588:	bb 1f       	adc	r27, r27
 58a:	66 1f       	adc	r22, r22
 58c:	77 1f       	adc	r23, r23
 58e:	88 1f       	adc	r24, r24
 590:	c2 f7       	brpl	.-16     	; 0x582 <__addsf3x+0x6e>
 592:	0e c0       	rjmp	.+28     	; 0x5b0 <__addsf3x+0x9c>
 594:	ba 0f       	add	r27, r26
 596:	62 1f       	adc	r22, r18
 598:	73 1f       	adc	r23, r19
 59a:	84 1f       	adc	r24, r20
 59c:	48 f4       	brcc	.+18     	; 0x5b0 <__addsf3x+0x9c>
 59e:	87 95       	ror	r24
 5a0:	77 95       	ror	r23
 5a2:	67 95       	ror	r22
 5a4:	b7 95       	ror	r27
 5a6:	f7 95       	ror	r31
 5a8:	9e 3f       	cpi	r25, 0xFE	; 254
 5aa:	08 f0       	brcs	.+2      	; 0x5ae <__addsf3x+0x9a>
 5ac:	b0 cf       	rjmp	.-160    	; 0x50e <__addsf3+0x28>
 5ae:	93 95       	inc	r25
 5b0:	88 0f       	add	r24, r24
 5b2:	08 f0       	brcs	.+2      	; 0x5b6 <__addsf3x+0xa2>
 5b4:	99 27       	eor	r25, r25
 5b6:	ee 0f       	add	r30, r30
 5b8:	97 95       	ror	r25
 5ba:	87 95       	ror	r24
 5bc:	08 95       	ret

000005be <__divsf3>:
 5be:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <__divsf3x>
 5c2:	0c 94 db 03 	jmp	0x7b6	; 0x7b6 <__fp_round>
 5c6:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__fp_pscB>
 5ca:	58 f0       	brcs	.+22     	; 0x5e2 <__divsf3+0x24>
 5cc:	0e 94 cd 03 	call	0x79a	; 0x79a <__fp_pscA>
 5d0:	40 f0       	brcs	.+16     	; 0x5e2 <__divsf3+0x24>
 5d2:	29 f4       	brne	.+10     	; 0x5de <__divsf3+0x20>
 5d4:	5f 3f       	cpi	r21, 0xFF	; 255
 5d6:	29 f0       	breq	.+10     	; 0x5e2 <__divsf3+0x24>
 5d8:	0c 94 c4 03 	jmp	0x788	; 0x788 <__fp_inf>
 5dc:	51 11       	cpse	r21, r1
 5de:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__fp_szero>
 5e2:	0c 94 ca 03 	jmp	0x794	; 0x794 <__fp_nan>

000005e6 <__divsf3x>:
 5e6:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <__fp_split3>
 5ea:	68 f3       	brcs	.-38     	; 0x5c6 <__divsf3+0x8>

000005ec <__divsf3_pse>:
 5ec:	99 23       	and	r25, r25
 5ee:	b1 f3       	breq	.-20     	; 0x5dc <__divsf3+0x1e>
 5f0:	55 23       	and	r21, r21
 5f2:	91 f3       	breq	.-28     	; 0x5d8 <__divsf3+0x1a>
 5f4:	95 1b       	sub	r25, r21
 5f6:	55 0b       	sbc	r21, r21
 5f8:	bb 27       	eor	r27, r27
 5fa:	aa 27       	eor	r26, r26
 5fc:	62 17       	cp	r22, r18
 5fe:	73 07       	cpc	r23, r19
 600:	84 07       	cpc	r24, r20
 602:	38 f0       	brcs	.+14     	; 0x612 <__divsf3_pse+0x26>
 604:	9f 5f       	subi	r25, 0xFF	; 255
 606:	5f 4f       	sbci	r21, 0xFF	; 255
 608:	22 0f       	add	r18, r18
 60a:	33 1f       	adc	r19, r19
 60c:	44 1f       	adc	r20, r20
 60e:	aa 1f       	adc	r26, r26
 610:	a9 f3       	breq	.-22     	; 0x5fc <__divsf3_pse+0x10>
 612:	35 d0       	rcall	.+106    	; 0x67e <__divsf3_pse+0x92>
 614:	0e 2e       	mov	r0, r30
 616:	3a f0       	brmi	.+14     	; 0x626 <__divsf3_pse+0x3a>
 618:	e0 e8       	ldi	r30, 0x80	; 128
 61a:	32 d0       	rcall	.+100    	; 0x680 <__divsf3_pse+0x94>
 61c:	91 50       	subi	r25, 0x01	; 1
 61e:	50 40       	sbci	r21, 0x00	; 0
 620:	e6 95       	lsr	r30
 622:	00 1c       	adc	r0, r0
 624:	ca f7       	brpl	.-14     	; 0x618 <__divsf3_pse+0x2c>
 626:	2b d0       	rcall	.+86     	; 0x67e <__divsf3_pse+0x92>
 628:	fe 2f       	mov	r31, r30
 62a:	29 d0       	rcall	.+82     	; 0x67e <__divsf3_pse+0x92>
 62c:	66 0f       	add	r22, r22
 62e:	77 1f       	adc	r23, r23
 630:	88 1f       	adc	r24, r24
 632:	bb 1f       	adc	r27, r27
 634:	26 17       	cp	r18, r22
 636:	37 07       	cpc	r19, r23
 638:	48 07       	cpc	r20, r24
 63a:	ab 07       	cpc	r26, r27
 63c:	b0 e8       	ldi	r27, 0x80	; 128
 63e:	09 f0       	breq	.+2      	; 0x642 <__divsf3_pse+0x56>
 640:	bb 0b       	sbc	r27, r27
 642:	80 2d       	mov	r24, r0
 644:	bf 01       	movw	r22, r30
 646:	ff 27       	eor	r31, r31
 648:	93 58       	subi	r25, 0x83	; 131
 64a:	5f 4f       	sbci	r21, 0xFF	; 255
 64c:	3a f0       	brmi	.+14     	; 0x65c <__divsf3_pse+0x70>
 64e:	9e 3f       	cpi	r25, 0xFE	; 254
 650:	51 05       	cpc	r21, r1
 652:	78 f0       	brcs	.+30     	; 0x672 <__divsf3_pse+0x86>
 654:	0c 94 c4 03 	jmp	0x788	; 0x788 <__fp_inf>
 658:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__fp_szero>
 65c:	5f 3f       	cpi	r21, 0xFF	; 255
 65e:	e4 f3       	brlt	.-8      	; 0x658 <__divsf3_pse+0x6c>
 660:	98 3e       	cpi	r25, 0xE8	; 232
 662:	d4 f3       	brlt	.-12     	; 0x658 <__divsf3_pse+0x6c>
 664:	86 95       	lsr	r24
 666:	77 95       	ror	r23
 668:	67 95       	ror	r22
 66a:	b7 95       	ror	r27
 66c:	f7 95       	ror	r31
 66e:	9f 5f       	subi	r25, 0xFF	; 255
 670:	c9 f7       	brne	.-14     	; 0x664 <__divsf3_pse+0x78>
 672:	88 0f       	add	r24, r24
 674:	91 1d       	adc	r25, r1
 676:	96 95       	lsr	r25
 678:	87 95       	ror	r24
 67a:	97 f9       	bld	r25, 7
 67c:	08 95       	ret
 67e:	e1 e0       	ldi	r30, 0x01	; 1
 680:	66 0f       	add	r22, r22
 682:	77 1f       	adc	r23, r23
 684:	88 1f       	adc	r24, r24
 686:	bb 1f       	adc	r27, r27
 688:	62 17       	cp	r22, r18
 68a:	73 07       	cpc	r23, r19
 68c:	84 07       	cpc	r24, r20
 68e:	ba 07       	cpc	r27, r26
 690:	20 f0       	brcs	.+8      	; 0x69a <__divsf3_pse+0xae>
 692:	62 1b       	sub	r22, r18
 694:	73 0b       	sbc	r23, r19
 696:	84 0b       	sbc	r24, r20
 698:	ba 0b       	sbc	r27, r26
 69a:	ee 1f       	adc	r30, r30
 69c:	88 f7       	brcc	.-30     	; 0x680 <__divsf3_pse+0x94>
 69e:	e0 95       	com	r30
 6a0:	08 95       	ret

000006a2 <__fixsfsi>:
 6a2:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__fixunssfsi>
 6a6:	68 94       	set
 6a8:	b1 11       	cpse	r27, r1
 6aa:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__fp_szero>
 6ae:	08 95       	ret

000006b0 <__fixunssfsi>:
 6b0:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <__fp_splitA>
 6b4:	88 f0       	brcs	.+34     	; 0x6d8 <__fixunssfsi+0x28>
 6b6:	9f 57       	subi	r25, 0x7F	; 127
 6b8:	98 f0       	brcs	.+38     	; 0x6e0 <__fixunssfsi+0x30>
 6ba:	b9 2f       	mov	r27, r25
 6bc:	99 27       	eor	r25, r25
 6be:	b7 51       	subi	r27, 0x17	; 23
 6c0:	b0 f0       	brcs	.+44     	; 0x6ee <__fixunssfsi+0x3e>
 6c2:	e1 f0       	breq	.+56     	; 0x6fc <__fixunssfsi+0x4c>
 6c4:	66 0f       	add	r22, r22
 6c6:	77 1f       	adc	r23, r23
 6c8:	88 1f       	adc	r24, r24
 6ca:	99 1f       	adc	r25, r25
 6cc:	1a f0       	brmi	.+6      	; 0x6d4 <__fixunssfsi+0x24>
 6ce:	ba 95       	dec	r27
 6d0:	c9 f7       	brne	.-14     	; 0x6c4 <__fixunssfsi+0x14>
 6d2:	14 c0       	rjmp	.+40     	; 0x6fc <__fixunssfsi+0x4c>
 6d4:	b1 30       	cpi	r27, 0x01	; 1
 6d6:	91 f0       	breq	.+36     	; 0x6fc <__fixunssfsi+0x4c>
 6d8:	0e 94 0e 04 	call	0x81c	; 0x81c <__fp_zero>
 6dc:	b1 e0       	ldi	r27, 0x01	; 1
 6de:	08 95       	ret
 6e0:	0c 94 0e 04 	jmp	0x81c	; 0x81c <__fp_zero>
 6e4:	67 2f       	mov	r22, r23
 6e6:	78 2f       	mov	r23, r24
 6e8:	88 27       	eor	r24, r24
 6ea:	b8 5f       	subi	r27, 0xF8	; 248
 6ec:	39 f0       	breq	.+14     	; 0x6fc <__fixunssfsi+0x4c>
 6ee:	b9 3f       	cpi	r27, 0xF9	; 249
 6f0:	cc f3       	brlt	.-14     	; 0x6e4 <__fixunssfsi+0x34>
 6f2:	86 95       	lsr	r24
 6f4:	77 95       	ror	r23
 6f6:	67 95       	ror	r22
 6f8:	b3 95       	inc	r27
 6fa:	d9 f7       	brne	.-10     	; 0x6f2 <__fixunssfsi+0x42>
 6fc:	3e f4       	brtc	.+14     	; 0x70c <__fixunssfsi+0x5c>
 6fe:	90 95       	com	r25
 700:	80 95       	com	r24
 702:	70 95       	com	r23
 704:	61 95       	neg	r22
 706:	7f 4f       	sbci	r23, 0xFF	; 255
 708:	8f 4f       	sbci	r24, 0xFF	; 255
 70a:	9f 4f       	sbci	r25, 0xFF	; 255
 70c:	08 95       	ret

0000070e <__floatunsisf>:
 70e:	e8 94       	clt
 710:	09 c0       	rjmp	.+18     	; 0x724 <__floatsisf+0x12>

00000712 <__floatsisf>:
 712:	97 fb       	bst	r25, 7
 714:	3e f4       	brtc	.+14     	; 0x724 <__floatsisf+0x12>
 716:	90 95       	com	r25
 718:	80 95       	com	r24
 71a:	70 95       	com	r23
 71c:	61 95       	neg	r22
 71e:	7f 4f       	sbci	r23, 0xFF	; 255
 720:	8f 4f       	sbci	r24, 0xFF	; 255
 722:	9f 4f       	sbci	r25, 0xFF	; 255
 724:	99 23       	and	r25, r25
 726:	a9 f0       	breq	.+42     	; 0x752 <__floatsisf+0x40>
 728:	f9 2f       	mov	r31, r25
 72a:	96 e9       	ldi	r25, 0x96	; 150
 72c:	bb 27       	eor	r27, r27
 72e:	93 95       	inc	r25
 730:	f6 95       	lsr	r31
 732:	87 95       	ror	r24
 734:	77 95       	ror	r23
 736:	67 95       	ror	r22
 738:	b7 95       	ror	r27
 73a:	f1 11       	cpse	r31, r1
 73c:	f8 cf       	rjmp	.-16     	; 0x72e <__floatsisf+0x1c>
 73e:	fa f4       	brpl	.+62     	; 0x77e <__floatsisf+0x6c>
 740:	bb 0f       	add	r27, r27
 742:	11 f4       	brne	.+4      	; 0x748 <__floatsisf+0x36>
 744:	60 ff       	sbrs	r22, 0
 746:	1b c0       	rjmp	.+54     	; 0x77e <__floatsisf+0x6c>
 748:	6f 5f       	subi	r22, 0xFF	; 255
 74a:	7f 4f       	sbci	r23, 0xFF	; 255
 74c:	8f 4f       	sbci	r24, 0xFF	; 255
 74e:	9f 4f       	sbci	r25, 0xFF	; 255
 750:	16 c0       	rjmp	.+44     	; 0x77e <__floatsisf+0x6c>
 752:	88 23       	and	r24, r24
 754:	11 f0       	breq	.+4      	; 0x75a <__floatsisf+0x48>
 756:	96 e9       	ldi	r25, 0x96	; 150
 758:	11 c0       	rjmp	.+34     	; 0x77c <__floatsisf+0x6a>
 75a:	77 23       	and	r23, r23
 75c:	21 f0       	breq	.+8      	; 0x766 <__floatsisf+0x54>
 75e:	9e e8       	ldi	r25, 0x8E	; 142
 760:	87 2f       	mov	r24, r23
 762:	76 2f       	mov	r23, r22
 764:	05 c0       	rjmp	.+10     	; 0x770 <__floatsisf+0x5e>
 766:	66 23       	and	r22, r22
 768:	71 f0       	breq	.+28     	; 0x786 <__floatsisf+0x74>
 76a:	96 e8       	ldi	r25, 0x86	; 134
 76c:	86 2f       	mov	r24, r22
 76e:	70 e0       	ldi	r23, 0x00	; 0
 770:	60 e0       	ldi	r22, 0x00	; 0
 772:	2a f0       	brmi	.+10     	; 0x77e <__floatsisf+0x6c>
 774:	9a 95       	dec	r25
 776:	66 0f       	add	r22, r22
 778:	77 1f       	adc	r23, r23
 77a:	88 1f       	adc	r24, r24
 77c:	da f7       	brpl	.-10     	; 0x774 <__floatsisf+0x62>
 77e:	88 0f       	add	r24, r24
 780:	96 95       	lsr	r25
 782:	87 95       	ror	r24
 784:	97 f9       	bld	r25, 7
 786:	08 95       	ret

00000788 <__fp_inf>:
 788:	97 f9       	bld	r25, 7
 78a:	9f 67       	ori	r25, 0x7F	; 127
 78c:	80 e8       	ldi	r24, 0x80	; 128
 78e:	70 e0       	ldi	r23, 0x00	; 0
 790:	60 e0       	ldi	r22, 0x00	; 0
 792:	08 95       	ret

00000794 <__fp_nan>:
 794:	9f ef       	ldi	r25, 0xFF	; 255
 796:	80 ec       	ldi	r24, 0xC0	; 192
 798:	08 95       	ret

0000079a <__fp_pscA>:
 79a:	00 24       	eor	r0, r0
 79c:	0a 94       	dec	r0
 79e:	16 16       	cp	r1, r22
 7a0:	17 06       	cpc	r1, r23
 7a2:	18 06       	cpc	r1, r24
 7a4:	09 06       	cpc	r0, r25
 7a6:	08 95       	ret

000007a8 <__fp_pscB>:
 7a8:	00 24       	eor	r0, r0
 7aa:	0a 94       	dec	r0
 7ac:	12 16       	cp	r1, r18
 7ae:	13 06       	cpc	r1, r19
 7b0:	14 06       	cpc	r1, r20
 7b2:	05 06       	cpc	r0, r21
 7b4:	08 95       	ret

000007b6 <__fp_round>:
 7b6:	09 2e       	mov	r0, r25
 7b8:	03 94       	inc	r0
 7ba:	00 0c       	add	r0, r0
 7bc:	11 f4       	brne	.+4      	; 0x7c2 <__fp_round+0xc>
 7be:	88 23       	and	r24, r24
 7c0:	52 f0       	brmi	.+20     	; 0x7d6 <__fp_round+0x20>
 7c2:	bb 0f       	add	r27, r27
 7c4:	40 f4       	brcc	.+16     	; 0x7d6 <__fp_round+0x20>
 7c6:	bf 2b       	or	r27, r31
 7c8:	11 f4       	brne	.+4      	; 0x7ce <__fp_round+0x18>
 7ca:	60 ff       	sbrs	r22, 0
 7cc:	04 c0       	rjmp	.+8      	; 0x7d6 <__fp_round+0x20>
 7ce:	6f 5f       	subi	r22, 0xFF	; 255
 7d0:	7f 4f       	sbci	r23, 0xFF	; 255
 7d2:	8f 4f       	sbci	r24, 0xFF	; 255
 7d4:	9f 4f       	sbci	r25, 0xFF	; 255
 7d6:	08 95       	ret

000007d8 <__fp_split3>:
 7d8:	57 fd       	sbrc	r21, 7
 7da:	90 58       	subi	r25, 0x80	; 128
 7dc:	44 0f       	add	r20, r20
 7de:	55 1f       	adc	r21, r21
 7e0:	59 f0       	breq	.+22     	; 0x7f8 <__fp_splitA+0x10>
 7e2:	5f 3f       	cpi	r21, 0xFF	; 255
 7e4:	71 f0       	breq	.+28     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7e6:	47 95       	ror	r20

000007e8 <__fp_splitA>:
 7e8:	88 0f       	add	r24, r24
 7ea:	97 fb       	bst	r25, 7
 7ec:	99 1f       	adc	r25, r25
 7ee:	61 f0       	breq	.+24     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7f0:	9f 3f       	cpi	r25, 0xFF	; 255
 7f2:	79 f0       	breq	.+30     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 7f4:	87 95       	ror	r24
 7f6:	08 95       	ret
 7f8:	12 16       	cp	r1, r18
 7fa:	13 06       	cpc	r1, r19
 7fc:	14 06       	cpc	r1, r20
 7fe:	55 1f       	adc	r21, r21
 800:	f2 cf       	rjmp	.-28     	; 0x7e6 <__fp_split3+0xe>
 802:	46 95       	lsr	r20
 804:	f1 df       	rcall	.-30     	; 0x7e8 <__fp_splitA>
 806:	08 c0       	rjmp	.+16     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 808:	16 16       	cp	r1, r22
 80a:	17 06       	cpc	r1, r23
 80c:	18 06       	cpc	r1, r24
 80e:	99 1f       	adc	r25, r25
 810:	f1 cf       	rjmp	.-30     	; 0x7f4 <__fp_splitA+0xc>
 812:	86 95       	lsr	r24
 814:	71 05       	cpc	r23, r1
 816:	61 05       	cpc	r22, r1
 818:	08 94       	sec
 81a:	08 95       	ret

0000081c <__fp_zero>:
 81c:	e8 94       	clt

0000081e <__fp_szero>:
 81e:	bb 27       	eor	r27, r27
 820:	66 27       	eor	r22, r22
 822:	77 27       	eor	r23, r23
 824:	cb 01       	movw	r24, r22
 826:	97 f9       	bld	r25, 7
 828:	08 95       	ret

0000082a <__mulsf3>:
 82a:	0e 94 28 04 	call	0x850	; 0x850 <__mulsf3x>
 82e:	0c 94 db 03 	jmp	0x7b6	; 0x7b6 <__fp_round>
 832:	0e 94 cd 03 	call	0x79a	; 0x79a <__fp_pscA>
 836:	38 f0       	brcs	.+14     	; 0x846 <__mulsf3+0x1c>
 838:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__fp_pscB>
 83c:	20 f0       	brcs	.+8      	; 0x846 <__mulsf3+0x1c>
 83e:	95 23       	and	r25, r21
 840:	11 f0       	breq	.+4      	; 0x846 <__mulsf3+0x1c>
 842:	0c 94 c4 03 	jmp	0x788	; 0x788 <__fp_inf>
 846:	0c 94 ca 03 	jmp	0x794	; 0x794 <__fp_nan>
 84a:	11 24       	eor	r1, r1
 84c:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__fp_szero>

00000850 <__mulsf3x>:
 850:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <__fp_split3>
 854:	70 f3       	brcs	.-36     	; 0x832 <__mulsf3+0x8>

00000856 <__mulsf3_pse>:
 856:	95 9f       	mul	r25, r21
 858:	c1 f3       	breq	.-16     	; 0x84a <__mulsf3+0x20>
 85a:	95 0f       	add	r25, r21
 85c:	50 e0       	ldi	r21, 0x00	; 0
 85e:	55 1f       	adc	r21, r21
 860:	62 9f       	mul	r22, r18
 862:	f0 01       	movw	r30, r0
 864:	72 9f       	mul	r23, r18
 866:	bb 27       	eor	r27, r27
 868:	f0 0d       	add	r31, r0
 86a:	b1 1d       	adc	r27, r1
 86c:	63 9f       	mul	r22, r19
 86e:	aa 27       	eor	r26, r26
 870:	f0 0d       	add	r31, r0
 872:	b1 1d       	adc	r27, r1
 874:	aa 1f       	adc	r26, r26
 876:	64 9f       	mul	r22, r20
 878:	66 27       	eor	r22, r22
 87a:	b0 0d       	add	r27, r0
 87c:	a1 1d       	adc	r26, r1
 87e:	66 1f       	adc	r22, r22
 880:	82 9f       	mul	r24, r18
 882:	22 27       	eor	r18, r18
 884:	b0 0d       	add	r27, r0
 886:	a1 1d       	adc	r26, r1
 888:	62 1f       	adc	r22, r18
 88a:	73 9f       	mul	r23, r19
 88c:	b0 0d       	add	r27, r0
 88e:	a1 1d       	adc	r26, r1
 890:	62 1f       	adc	r22, r18
 892:	83 9f       	mul	r24, r19
 894:	a0 0d       	add	r26, r0
 896:	61 1d       	adc	r22, r1
 898:	22 1f       	adc	r18, r18
 89a:	74 9f       	mul	r23, r20
 89c:	33 27       	eor	r19, r19
 89e:	a0 0d       	add	r26, r0
 8a0:	61 1d       	adc	r22, r1
 8a2:	23 1f       	adc	r18, r19
 8a4:	84 9f       	mul	r24, r20
 8a6:	60 0d       	add	r22, r0
 8a8:	21 1d       	adc	r18, r1
 8aa:	82 2f       	mov	r24, r18
 8ac:	76 2f       	mov	r23, r22
 8ae:	6a 2f       	mov	r22, r26
 8b0:	11 24       	eor	r1, r1
 8b2:	9f 57       	subi	r25, 0x7F	; 127
 8b4:	50 40       	sbci	r21, 0x00	; 0
 8b6:	9a f0       	brmi	.+38     	; 0x8de <__stack+0x7f>
 8b8:	f1 f0       	breq	.+60     	; 0x8f6 <__stack+0x97>
 8ba:	88 23       	and	r24, r24
 8bc:	4a f0       	brmi	.+18     	; 0x8d0 <__stack+0x71>
 8be:	ee 0f       	add	r30, r30
 8c0:	ff 1f       	adc	r31, r31
 8c2:	bb 1f       	adc	r27, r27
 8c4:	66 1f       	adc	r22, r22
 8c6:	77 1f       	adc	r23, r23
 8c8:	88 1f       	adc	r24, r24
 8ca:	91 50       	subi	r25, 0x01	; 1
 8cc:	50 40       	sbci	r21, 0x00	; 0
 8ce:	a9 f7       	brne	.-22     	; 0x8ba <__stack+0x5b>
 8d0:	9e 3f       	cpi	r25, 0xFE	; 254
 8d2:	51 05       	cpc	r21, r1
 8d4:	80 f0       	brcs	.+32     	; 0x8f6 <__stack+0x97>
 8d6:	0c 94 c4 03 	jmp	0x788	; 0x788 <__fp_inf>
 8da:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__fp_szero>
 8de:	5f 3f       	cpi	r21, 0xFF	; 255
 8e0:	e4 f3       	brlt	.-8      	; 0x8da <__stack+0x7b>
 8e2:	98 3e       	cpi	r25, 0xE8	; 232
 8e4:	d4 f3       	brlt	.-12     	; 0x8da <__stack+0x7b>
 8e6:	86 95       	lsr	r24
 8e8:	77 95       	ror	r23
 8ea:	67 95       	ror	r22
 8ec:	b7 95       	ror	r27
 8ee:	f7 95       	ror	r31
 8f0:	e7 95       	ror	r30
 8f2:	9f 5f       	subi	r25, 0xFF	; 255
 8f4:	c1 f7       	brne	.-16     	; 0x8e6 <__stack+0x87>
 8f6:	fe 2b       	or	r31, r30
 8f8:	88 0f       	add	r24, r24
 8fa:	91 1d       	adc	r25, r1
 8fc:	96 95       	lsr	r25
 8fe:	87 95       	ror	r24
 900:	97 f9       	bld	r25, 7
 902:	08 95       	ret

00000904 <__mulsi3>:
 904:	db 01       	movw	r26, r22
 906:	8f 93       	push	r24
 908:	9f 93       	push	r25
 90a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <__muluhisi3>
 90e:	bf 91       	pop	r27
 910:	af 91       	pop	r26
 912:	a2 9f       	mul	r26, r18
 914:	80 0d       	add	r24, r0
 916:	91 1d       	adc	r25, r1
 918:	a3 9f       	mul	r26, r19
 91a:	90 0d       	add	r25, r0
 91c:	b2 9f       	mul	r27, r18
 91e:	90 0d       	add	r25, r0
 920:	11 24       	eor	r1, r1
 922:	08 95       	ret

00000924 <__divmodhi4>:
 924:	97 fb       	bst	r25, 7
 926:	07 2e       	mov	r0, r23
 928:	16 f4       	brtc	.+4      	; 0x92e <__divmodhi4+0xa>
 92a:	00 94       	com	r0
 92c:	07 d0       	rcall	.+14     	; 0x93c <__divmodhi4_neg1>
 92e:	77 fd       	sbrc	r23, 7
 930:	09 d0       	rcall	.+18     	; 0x944 <__divmodhi4_neg2>
 932:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__udivmodhi4>
 936:	07 fc       	sbrc	r0, 7
 938:	05 d0       	rcall	.+10     	; 0x944 <__divmodhi4_neg2>
 93a:	3e f4       	brtc	.+14     	; 0x94a <__divmodhi4_exit>

0000093c <__divmodhi4_neg1>:
 93c:	90 95       	com	r25
 93e:	81 95       	neg	r24
 940:	9f 4f       	sbci	r25, 0xFF	; 255
 942:	08 95       	ret

00000944 <__divmodhi4_neg2>:
 944:	70 95       	com	r23
 946:	61 95       	neg	r22
 948:	7f 4f       	sbci	r23, 0xFF	; 255

0000094a <__divmodhi4_exit>:
 94a:	08 95       	ret

0000094c <__udivmodsi4>:
 94c:	a1 e2       	ldi	r26, 0x21	; 33
 94e:	1a 2e       	mov	r1, r26
 950:	aa 1b       	sub	r26, r26
 952:	bb 1b       	sub	r27, r27
 954:	fd 01       	movw	r30, r26
 956:	0d c0       	rjmp	.+26     	; 0x972 <__udivmodsi4_ep>

00000958 <__udivmodsi4_loop>:
 958:	aa 1f       	adc	r26, r26
 95a:	bb 1f       	adc	r27, r27
 95c:	ee 1f       	adc	r30, r30
 95e:	ff 1f       	adc	r31, r31
 960:	a2 17       	cp	r26, r18
 962:	b3 07       	cpc	r27, r19
 964:	e4 07       	cpc	r30, r20
 966:	f5 07       	cpc	r31, r21
 968:	20 f0       	brcs	.+8      	; 0x972 <__udivmodsi4_ep>
 96a:	a2 1b       	sub	r26, r18
 96c:	b3 0b       	sbc	r27, r19
 96e:	e4 0b       	sbc	r30, r20
 970:	f5 0b       	sbc	r31, r21

00000972 <__udivmodsi4_ep>:
 972:	66 1f       	adc	r22, r22
 974:	77 1f       	adc	r23, r23
 976:	88 1f       	adc	r24, r24
 978:	99 1f       	adc	r25, r25
 97a:	1a 94       	dec	r1
 97c:	69 f7       	brne	.-38     	; 0x958 <__udivmodsi4_loop>
 97e:	60 95       	com	r22
 980:	70 95       	com	r23
 982:	80 95       	com	r24
 984:	90 95       	com	r25
 986:	9b 01       	movw	r18, r22
 988:	ac 01       	movw	r20, r24
 98a:	bd 01       	movw	r22, r26
 98c:	cf 01       	movw	r24, r30
 98e:	08 95       	ret

00000990 <__divmodsi4>:
 990:	05 2e       	mov	r0, r21
 992:	97 fb       	bst	r25, 7
 994:	1e f4       	brtc	.+6      	; 0x99c <__divmodsi4+0xc>
 996:	00 94       	com	r0
 998:	0e 94 df 04 	call	0x9be	; 0x9be <__negsi2>
 99c:	57 fd       	sbrc	r21, 7
 99e:	07 d0       	rcall	.+14     	; 0x9ae <__divmodsi4_neg2>
 9a0:	0e 94 a6 04 	call	0x94c	; 0x94c <__udivmodsi4>
 9a4:	07 fc       	sbrc	r0, 7
 9a6:	03 d0       	rcall	.+6      	; 0x9ae <__divmodsi4_neg2>
 9a8:	4e f4       	brtc	.+18     	; 0x9bc <__divmodsi4_exit>
 9aa:	0c 94 df 04 	jmp	0x9be	; 0x9be <__negsi2>

000009ae <__divmodsi4_neg2>:
 9ae:	50 95       	com	r21
 9b0:	40 95       	com	r20
 9b2:	30 95       	com	r19
 9b4:	21 95       	neg	r18
 9b6:	3f 4f       	sbci	r19, 0xFF	; 255
 9b8:	4f 4f       	sbci	r20, 0xFF	; 255
 9ba:	5f 4f       	sbci	r21, 0xFF	; 255

000009bc <__divmodsi4_exit>:
 9bc:	08 95       	ret

000009be <__negsi2>:
 9be:	90 95       	com	r25
 9c0:	80 95       	com	r24
 9c2:	70 95       	com	r23
 9c4:	61 95       	neg	r22
 9c6:	7f 4f       	sbci	r23, 0xFF	; 255
 9c8:	8f 4f       	sbci	r24, 0xFF	; 255
 9ca:	9f 4f       	sbci	r25, 0xFF	; 255
 9cc:	08 95       	ret

000009ce <__muluhisi3>:
 9ce:	0e 94 06 05 	call	0xa0c	; 0xa0c <__umulhisi3>
 9d2:	a5 9f       	mul	r26, r21
 9d4:	90 0d       	add	r25, r0
 9d6:	b4 9f       	mul	r27, r20
 9d8:	90 0d       	add	r25, r0
 9da:	a4 9f       	mul	r26, r20
 9dc:	80 0d       	add	r24, r0
 9de:	91 1d       	adc	r25, r1
 9e0:	11 24       	eor	r1, r1
 9e2:	08 95       	ret

000009e4 <__udivmodhi4>:
 9e4:	aa 1b       	sub	r26, r26
 9e6:	bb 1b       	sub	r27, r27
 9e8:	51 e1       	ldi	r21, 0x11	; 17
 9ea:	07 c0       	rjmp	.+14     	; 0x9fa <__udivmodhi4_ep>

000009ec <__udivmodhi4_loop>:
 9ec:	aa 1f       	adc	r26, r26
 9ee:	bb 1f       	adc	r27, r27
 9f0:	a6 17       	cp	r26, r22
 9f2:	b7 07       	cpc	r27, r23
 9f4:	10 f0       	brcs	.+4      	; 0x9fa <__udivmodhi4_ep>
 9f6:	a6 1b       	sub	r26, r22
 9f8:	b7 0b       	sbc	r27, r23

000009fa <__udivmodhi4_ep>:
 9fa:	88 1f       	adc	r24, r24
 9fc:	99 1f       	adc	r25, r25
 9fe:	5a 95       	dec	r21
 a00:	a9 f7       	brne	.-22     	; 0x9ec <__udivmodhi4_loop>
 a02:	80 95       	com	r24
 a04:	90 95       	com	r25
 a06:	bc 01       	movw	r22, r24
 a08:	cd 01       	movw	r24, r26
 a0a:	08 95       	ret

00000a0c <__umulhisi3>:
 a0c:	a2 9f       	mul	r26, r18
 a0e:	b0 01       	movw	r22, r0
 a10:	b3 9f       	mul	r27, r19
 a12:	c0 01       	movw	r24, r0
 a14:	a3 9f       	mul	r26, r19
 a16:	70 0d       	add	r23, r0
 a18:	81 1d       	adc	r24, r1
 a1a:	11 24       	eor	r1, r1
 a1c:	91 1d       	adc	r25, r1
 a1e:	b2 9f       	mul	r27, r18
 a20:	70 0d       	add	r23, r0
 a22:	81 1d       	adc	r24, r1
 a24:	11 24       	eor	r1, r1
 a26:	91 1d       	adc	r25, r1
 a28:	08 95       	ret

00000a2a <__itoa_ncheck>:
 a2a:	bb 27       	eor	r27, r27
 a2c:	4a 30       	cpi	r20, 0x0A	; 10
 a2e:	31 f4       	brne	.+12     	; 0xa3c <__itoa_ncheck+0x12>
 a30:	99 23       	and	r25, r25
 a32:	22 f4       	brpl	.+8      	; 0xa3c <__itoa_ncheck+0x12>
 a34:	bd e2       	ldi	r27, 0x2D	; 45
 a36:	90 95       	com	r25
 a38:	81 95       	neg	r24
 a3a:	9f 4f       	sbci	r25, 0xFF	; 255
 a3c:	0c 94 21 05 	jmp	0xa42	; 0xa42 <__utoa_common>

00000a40 <__utoa_ncheck>:
 a40:	bb 27       	eor	r27, r27

00000a42 <__utoa_common>:
 a42:	fb 01       	movw	r30, r22
 a44:	55 27       	eor	r21, r21
 a46:	aa 27       	eor	r26, r26
 a48:	88 0f       	add	r24, r24
 a4a:	99 1f       	adc	r25, r25
 a4c:	aa 1f       	adc	r26, r26
 a4e:	a4 17       	cp	r26, r20
 a50:	10 f0       	brcs	.+4      	; 0xa56 <__utoa_common+0x14>
 a52:	a4 1b       	sub	r26, r20
 a54:	83 95       	inc	r24
 a56:	50 51       	subi	r21, 0x10	; 16
 a58:	b9 f7       	brne	.-18     	; 0xa48 <__utoa_common+0x6>
 a5a:	a0 5d       	subi	r26, 0xD0	; 208
 a5c:	aa 33       	cpi	r26, 0x3A	; 58
 a5e:	08 f0       	brcs	.+2      	; 0xa62 <__utoa_common+0x20>
 a60:	a9 5d       	subi	r26, 0xD9	; 217
 a62:	a1 93       	st	Z+, r26
 a64:	00 97       	sbiw	r24, 0x00	; 0
 a66:	79 f7       	brne	.-34     	; 0xa46 <__utoa_common+0x4>
 a68:	b1 11       	cpse	r27, r1
 a6a:	b1 93       	st	Z+, r27
 a6c:	11 92       	st	Z+, r1
 a6e:	cb 01       	movw	r24, r22
 a70:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <strrev>

00000a74 <strrev>:
 a74:	dc 01       	movw	r26, r24
 a76:	fc 01       	movw	r30, r24
 a78:	67 2f       	mov	r22, r23
 a7a:	71 91       	ld	r23, Z+
 a7c:	77 23       	and	r23, r23
 a7e:	e1 f7       	brne	.-8      	; 0xa78 <strrev+0x4>
 a80:	32 97       	sbiw	r30, 0x02	; 2
 a82:	04 c0       	rjmp	.+8      	; 0xa8c <strrev+0x18>
 a84:	7c 91       	ld	r23, X
 a86:	6d 93       	st	X+, r22
 a88:	70 83       	st	Z, r23
 a8a:	62 91       	ld	r22, -Z
 a8c:	ae 17       	cp	r26, r30
 a8e:	bf 07       	cpc	r27, r31
 a90:	c8 f3       	brcs	.-14     	; 0xa84 <strrev+0x10>
 a92:	08 95       	ret

00000a94 <_exit>:
 a94:	f8 94       	cli

00000a96 <__stop_program>:
 a96:	ff cf       	rjmp	.-2      	; 0xa96 <__stop_program>
